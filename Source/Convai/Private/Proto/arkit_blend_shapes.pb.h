// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: arkit_blend_shapes.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_arkit_5fblend_5fshapes_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_arkit_5fblend_5fshapes_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_arkit_5fblend_5fshapes_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_arkit_5fblend_5fshapes_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_arkit_5fblend_5fshapes_2eproto;
namespace service {
class ARKitBlendShapes;
class ARKitBlendShapesDefaultTypeInternal;
extern ARKitBlendShapesDefaultTypeInternal _ARKitBlendShapes_default_instance_;
class ARKitBlendShapesData;
class ARKitBlendShapesDataDefaultTypeInternal;
extern ARKitBlendShapesDataDefaultTypeInternal _ARKitBlendShapesData_default_instance_;
}  // namespace service
PROTOBUF_NAMESPACE_OPEN
template<> ::service::ARKitBlendShapes* Arena::CreateMaybeMessage<::service::ARKitBlendShapes>(Arena*);
template<> ::service::ARKitBlendShapesData* Arena::CreateMaybeMessage<::service::ARKitBlendShapesData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace service {

// ===================================================================

class ARKitBlendShapesData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service.ARKitBlendShapesData) */ {
 public:
  inline ARKitBlendShapesData() : ARKitBlendShapesData(nullptr) {}
  virtual ~ARKitBlendShapesData();

  ARKitBlendShapesData(const ARKitBlendShapesData& from);
  ARKitBlendShapesData(ARKitBlendShapesData&& from) noexcept
    : ARKitBlendShapesData() {
    *this = ::std::move(from);
  }

  inline ARKitBlendShapesData& operator=(const ARKitBlendShapesData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ARKitBlendShapesData& operator=(ARKitBlendShapesData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ARKitBlendShapesData& default_instance();

  static inline const ARKitBlendShapesData* internal_default_instance() {
    return reinterpret_cast<const ARKitBlendShapesData*>(
               &_ARKitBlendShapesData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ARKitBlendShapesData& a, ARKitBlendShapesData& b) {
    a.Swap(&b);
  }
  inline void Swap(ARKitBlendShapesData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ARKitBlendShapesData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ARKitBlendShapesData* New() const final {
    return CreateMaybeMessage<ARKitBlendShapesData>(nullptr);
  }

  ARKitBlendShapesData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ARKitBlendShapesData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ARKitBlendShapesData& from);
  void MergeFrom(const ARKitBlendShapesData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ARKitBlendShapesData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service.ARKitBlendShapesData";
  }
  protected:
  explicit ARKitBlendShapesData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_arkit_5fblend_5fshapes_2eproto);
    return ::descriptor_table_arkit_5fblend_5fshapes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArKitBlendShapesFieldNumber = 1,
  };
  // .service.ARKitBlendShapes ar_kit_blend_shapes = 1;
  bool has_ar_kit_blend_shapes() const;
  private:
  bool _internal_has_ar_kit_blend_shapes() const;
  public:
  void clear_ar_kit_blend_shapes();
  const ::service::ARKitBlendShapes& ar_kit_blend_shapes() const;
  ::service::ARKitBlendShapes* release_ar_kit_blend_shapes();
  ::service::ARKitBlendShapes* mutable_ar_kit_blend_shapes();
  void set_allocated_ar_kit_blend_shapes(::service::ARKitBlendShapes* ar_kit_blend_shapes);
  private:
  const ::service::ARKitBlendShapes& _internal_ar_kit_blend_shapes() const;
  ::service::ARKitBlendShapes* _internal_mutable_ar_kit_blend_shapes();
  public:
  void unsafe_arena_set_allocated_ar_kit_blend_shapes(
      ::service::ARKitBlendShapes* ar_kit_blend_shapes);
  ::service::ARKitBlendShapes* unsafe_arena_release_ar_kit_blend_shapes();

  // @@protoc_insertion_point(class_scope:service.ARKitBlendShapesData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::service::ARKitBlendShapes* ar_kit_blend_shapes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_arkit_5fblend_5fshapes_2eproto;
};
// -------------------------------------------------------------------

class ARKitBlendShapes PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service.ARKitBlendShapes) */ {
 public:
  inline ARKitBlendShapes() : ARKitBlendShapes(nullptr) {}
  virtual ~ARKitBlendShapes();

  ARKitBlendShapes(const ARKitBlendShapes& from);
  ARKitBlendShapes(ARKitBlendShapes&& from) noexcept
    : ARKitBlendShapes() {
    *this = ::std::move(from);
  }

  inline ARKitBlendShapes& operator=(const ARKitBlendShapes& from) {
    CopyFrom(from);
    return *this;
  }
  inline ARKitBlendShapes& operator=(ARKitBlendShapes&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ARKitBlendShapes& default_instance();

  static inline const ARKitBlendShapes* internal_default_instance() {
    return reinterpret_cast<const ARKitBlendShapes*>(
               &_ARKitBlendShapes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ARKitBlendShapes& a, ARKitBlendShapes& b) {
    a.Swap(&b);
  }
  inline void Swap(ARKitBlendShapes* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ARKitBlendShapes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ARKitBlendShapes* New() const final {
    return CreateMaybeMessage<ARKitBlendShapes>(nullptr);
  }

  ARKitBlendShapes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ARKitBlendShapes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ARKitBlendShapes& from);
  void MergeFrom(const ARKitBlendShapes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ARKitBlendShapes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service.ARKitBlendShapes";
  }
  protected:
  explicit ARKitBlendShapes(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_arkit_5fblend_5fshapes_2eproto);
    return ::descriptor_table_arkit_5fblend_5fshapes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBrowDownLeftFieldNumber = 1,
    kBrowDownRightFieldNumber = 2,
    kBrowInnerUpFieldNumber = 3,
    kBrowOuterUpLeftFieldNumber = 4,
    kBrowOuterUpRightFieldNumber = 5,
    kCheekPuffFieldNumber = 6,
    kCheekSquintLeftFieldNumber = 7,
    kCheekSquintRightFieldNumber = 8,
    kEyeBlinkLeftFieldNumber = 9,
    kEyeBlinkRightFieldNumber = 10,
    kEyeLookDownLeftFieldNumber = 11,
    kEyeLookDownRightFieldNumber = 12,
    kEyeLookInLeftFieldNumber = 13,
    kEyeLookInRightFieldNumber = 14,
    kEyeLookOutLeftFieldNumber = 15,
    kEyeLookOutRightFieldNumber = 16,
    kEyeLookUpLeftFieldNumber = 17,
    kEyeLookUpRightFieldNumber = 18,
    kEyeSquintLeftFieldNumber = 19,
    kEyeSquintRightFieldNumber = 20,
    kEyeWideLeftFieldNumber = 21,
    kEyeWideRightFieldNumber = 22,
    kJawForwardFieldNumber = 23,
    kJawLeftFieldNumber = 24,
    kJawOpenFieldNumber = 25,
    kJawRightFieldNumber = 26,
    kMouthCloseFieldNumber = 27,
    kMouthDimpleLeftFieldNumber = 28,
    kMouthDimpleRightFieldNumber = 29,
    kMouthFrownLeftFieldNumber = 30,
    kMouthFrownRightFieldNumber = 31,
    kMouthFunnelFieldNumber = 32,
    kMouthLeftFieldNumber = 33,
    kMouthLowerDownLeftFieldNumber = 34,
    kMouthLowerDownRightFieldNumber = 35,
    kMouthPressLeftFieldNumber = 36,
    kMouthPressRightFieldNumber = 37,
    kMouthPuckerFieldNumber = 38,
    kMouthRightFieldNumber = 39,
    kMouthRollLowerFieldNumber = 40,
    kMouthRollUpperFieldNumber = 41,
    kMouthShrugLowerFieldNumber = 42,
    kMouthShrugUpperFieldNumber = 43,
    kMouthSmileLeftFieldNumber = 44,
    kMouthSmileRightFieldNumber = 45,
    kMouthStretchLeftFieldNumber = 46,
    kMouthStretchRightFieldNumber = 47,
    kMouthUpperUpLeftFieldNumber = 48,
    kMouthUpperUpRightFieldNumber = 49,
    kNoseSneerLeftFieldNumber = 50,
    kNoseSneerRightFieldNumber = 51,
    kTongueOutFieldNumber = 52,
  };
  // float brow_down_left = 1;
  void clear_brow_down_left();
  float brow_down_left() const;
  void set_brow_down_left(float value);
  private:
  float _internal_brow_down_left() const;
  void _internal_set_brow_down_left(float value);
  public:

  // float brow_down_right = 2;
  void clear_brow_down_right();
  float brow_down_right() const;
  void set_brow_down_right(float value);
  private:
  float _internal_brow_down_right() const;
  void _internal_set_brow_down_right(float value);
  public:

  // float brow_inner_up = 3;
  void clear_brow_inner_up();
  float brow_inner_up() const;
  void set_brow_inner_up(float value);
  private:
  float _internal_brow_inner_up() const;
  void _internal_set_brow_inner_up(float value);
  public:

  // float brow_outer_up_left = 4;
  void clear_brow_outer_up_left();
  float brow_outer_up_left() const;
  void set_brow_outer_up_left(float value);
  private:
  float _internal_brow_outer_up_left() const;
  void _internal_set_brow_outer_up_left(float value);
  public:

  // float brow_outer_up_right = 5;
  void clear_brow_outer_up_right();
  float brow_outer_up_right() const;
  void set_brow_outer_up_right(float value);
  private:
  float _internal_brow_outer_up_right() const;
  void _internal_set_brow_outer_up_right(float value);
  public:

  // float cheek_puff = 6;
  void clear_cheek_puff();
  float cheek_puff() const;
  void set_cheek_puff(float value);
  private:
  float _internal_cheek_puff() const;
  void _internal_set_cheek_puff(float value);
  public:

  // float cheek_squint_left = 7;
  void clear_cheek_squint_left();
  float cheek_squint_left() const;
  void set_cheek_squint_left(float value);
  private:
  float _internal_cheek_squint_left() const;
  void _internal_set_cheek_squint_left(float value);
  public:

  // float cheek_squint_right = 8;
  void clear_cheek_squint_right();
  float cheek_squint_right() const;
  void set_cheek_squint_right(float value);
  private:
  float _internal_cheek_squint_right() const;
  void _internal_set_cheek_squint_right(float value);
  public:

  // float eye_blink_left = 9;
  void clear_eye_blink_left();
  float eye_blink_left() const;
  void set_eye_blink_left(float value);
  private:
  float _internal_eye_blink_left() const;
  void _internal_set_eye_blink_left(float value);
  public:

  // float eye_blink_right = 10;
  void clear_eye_blink_right();
  float eye_blink_right() const;
  void set_eye_blink_right(float value);
  private:
  float _internal_eye_blink_right() const;
  void _internal_set_eye_blink_right(float value);
  public:

  // float eye_look_down_left = 11;
  void clear_eye_look_down_left();
  float eye_look_down_left() const;
  void set_eye_look_down_left(float value);
  private:
  float _internal_eye_look_down_left() const;
  void _internal_set_eye_look_down_left(float value);
  public:

  // float eye_look_down_right = 12;
  void clear_eye_look_down_right();
  float eye_look_down_right() const;
  void set_eye_look_down_right(float value);
  private:
  float _internal_eye_look_down_right() const;
  void _internal_set_eye_look_down_right(float value);
  public:

  // float eye_look_in_left = 13;
  void clear_eye_look_in_left();
  float eye_look_in_left() const;
  void set_eye_look_in_left(float value);
  private:
  float _internal_eye_look_in_left() const;
  void _internal_set_eye_look_in_left(float value);
  public:

  // float eye_look_in_right = 14;
  void clear_eye_look_in_right();
  float eye_look_in_right() const;
  void set_eye_look_in_right(float value);
  private:
  float _internal_eye_look_in_right() const;
  void _internal_set_eye_look_in_right(float value);
  public:

  // float eye_look_out_left = 15;
  void clear_eye_look_out_left();
  float eye_look_out_left() const;
  void set_eye_look_out_left(float value);
  private:
  float _internal_eye_look_out_left() const;
  void _internal_set_eye_look_out_left(float value);
  public:

  // float eye_look_out_right = 16;
  void clear_eye_look_out_right();
  float eye_look_out_right() const;
  void set_eye_look_out_right(float value);
  private:
  float _internal_eye_look_out_right() const;
  void _internal_set_eye_look_out_right(float value);
  public:

  // float eye_look_up_left = 17;
  void clear_eye_look_up_left();
  float eye_look_up_left() const;
  void set_eye_look_up_left(float value);
  private:
  float _internal_eye_look_up_left() const;
  void _internal_set_eye_look_up_left(float value);
  public:

  // float eye_look_up_right = 18;
  void clear_eye_look_up_right();
  float eye_look_up_right() const;
  void set_eye_look_up_right(float value);
  private:
  float _internal_eye_look_up_right() const;
  void _internal_set_eye_look_up_right(float value);
  public:

  // float eye_squint_left = 19;
  void clear_eye_squint_left();
  float eye_squint_left() const;
  void set_eye_squint_left(float value);
  private:
  float _internal_eye_squint_left() const;
  void _internal_set_eye_squint_left(float value);
  public:

  // float eye_squint_right = 20;
  void clear_eye_squint_right();
  float eye_squint_right() const;
  void set_eye_squint_right(float value);
  private:
  float _internal_eye_squint_right() const;
  void _internal_set_eye_squint_right(float value);
  public:

  // float eye_wide_left = 21;
  void clear_eye_wide_left();
  float eye_wide_left() const;
  void set_eye_wide_left(float value);
  private:
  float _internal_eye_wide_left() const;
  void _internal_set_eye_wide_left(float value);
  public:

  // float eye_wide_right = 22;
  void clear_eye_wide_right();
  float eye_wide_right() const;
  void set_eye_wide_right(float value);
  private:
  float _internal_eye_wide_right() const;
  void _internal_set_eye_wide_right(float value);
  public:

  // float jaw_forward = 23;
  void clear_jaw_forward();
  float jaw_forward() const;
  void set_jaw_forward(float value);
  private:
  float _internal_jaw_forward() const;
  void _internal_set_jaw_forward(float value);
  public:

  // float jaw_left = 24;
  void clear_jaw_left();
  float jaw_left() const;
  void set_jaw_left(float value);
  private:
  float _internal_jaw_left() const;
  void _internal_set_jaw_left(float value);
  public:

  // float jaw_open = 25;
  void clear_jaw_open();
  float jaw_open() const;
  void set_jaw_open(float value);
  private:
  float _internal_jaw_open() const;
  void _internal_set_jaw_open(float value);
  public:

  // float jaw_right = 26;
  void clear_jaw_right();
  float jaw_right() const;
  void set_jaw_right(float value);
  private:
  float _internal_jaw_right() const;
  void _internal_set_jaw_right(float value);
  public:

  // float mouth_close = 27;
  void clear_mouth_close();
  float mouth_close() const;
  void set_mouth_close(float value);
  private:
  float _internal_mouth_close() const;
  void _internal_set_mouth_close(float value);
  public:

  // float mouth_dimple_left = 28;
  void clear_mouth_dimple_left();
  float mouth_dimple_left() const;
  void set_mouth_dimple_left(float value);
  private:
  float _internal_mouth_dimple_left() const;
  void _internal_set_mouth_dimple_left(float value);
  public:

  // float mouth_dimple_right = 29;
  void clear_mouth_dimple_right();
  float mouth_dimple_right() const;
  void set_mouth_dimple_right(float value);
  private:
  float _internal_mouth_dimple_right() const;
  void _internal_set_mouth_dimple_right(float value);
  public:

  // float mouth_frown_left = 30;
  void clear_mouth_frown_left();
  float mouth_frown_left() const;
  void set_mouth_frown_left(float value);
  private:
  float _internal_mouth_frown_left() const;
  void _internal_set_mouth_frown_left(float value);
  public:

  // float mouth_frown_right = 31;
  void clear_mouth_frown_right();
  float mouth_frown_right() const;
  void set_mouth_frown_right(float value);
  private:
  float _internal_mouth_frown_right() const;
  void _internal_set_mouth_frown_right(float value);
  public:

  // float mouth_funnel = 32;
  void clear_mouth_funnel();
  float mouth_funnel() const;
  void set_mouth_funnel(float value);
  private:
  float _internal_mouth_funnel() const;
  void _internal_set_mouth_funnel(float value);
  public:

  // float mouth_left = 33;
  void clear_mouth_left();
  float mouth_left() const;
  void set_mouth_left(float value);
  private:
  float _internal_mouth_left() const;
  void _internal_set_mouth_left(float value);
  public:

  // float mouth_lower_down_left = 34;
  void clear_mouth_lower_down_left();
  float mouth_lower_down_left() const;
  void set_mouth_lower_down_left(float value);
  private:
  float _internal_mouth_lower_down_left() const;
  void _internal_set_mouth_lower_down_left(float value);
  public:

  // float mouth_lower_down_right = 35;
  void clear_mouth_lower_down_right();
  float mouth_lower_down_right() const;
  void set_mouth_lower_down_right(float value);
  private:
  float _internal_mouth_lower_down_right() const;
  void _internal_set_mouth_lower_down_right(float value);
  public:

  // float mouth_press_left = 36;
  void clear_mouth_press_left();
  float mouth_press_left() const;
  void set_mouth_press_left(float value);
  private:
  float _internal_mouth_press_left() const;
  void _internal_set_mouth_press_left(float value);
  public:

  // float mouth_press_right = 37;
  void clear_mouth_press_right();
  float mouth_press_right() const;
  void set_mouth_press_right(float value);
  private:
  float _internal_mouth_press_right() const;
  void _internal_set_mouth_press_right(float value);
  public:

  // float mouth_pucker = 38;
  void clear_mouth_pucker();
  float mouth_pucker() const;
  void set_mouth_pucker(float value);
  private:
  float _internal_mouth_pucker() const;
  void _internal_set_mouth_pucker(float value);
  public:

  // float mouth_right = 39;
  void clear_mouth_right();
  float mouth_right() const;
  void set_mouth_right(float value);
  private:
  float _internal_mouth_right() const;
  void _internal_set_mouth_right(float value);
  public:

  // float mouth_roll_lower = 40;
  void clear_mouth_roll_lower();
  float mouth_roll_lower() const;
  void set_mouth_roll_lower(float value);
  private:
  float _internal_mouth_roll_lower() const;
  void _internal_set_mouth_roll_lower(float value);
  public:

  // float mouth_roll_upper = 41;
  void clear_mouth_roll_upper();
  float mouth_roll_upper() const;
  void set_mouth_roll_upper(float value);
  private:
  float _internal_mouth_roll_upper() const;
  void _internal_set_mouth_roll_upper(float value);
  public:

  // float mouth_shrug_lower = 42;
  void clear_mouth_shrug_lower();
  float mouth_shrug_lower() const;
  void set_mouth_shrug_lower(float value);
  private:
  float _internal_mouth_shrug_lower() const;
  void _internal_set_mouth_shrug_lower(float value);
  public:

  // float mouth_shrug_upper = 43;
  void clear_mouth_shrug_upper();
  float mouth_shrug_upper() const;
  void set_mouth_shrug_upper(float value);
  private:
  float _internal_mouth_shrug_upper() const;
  void _internal_set_mouth_shrug_upper(float value);
  public:

  // float mouth_smile_left = 44;
  void clear_mouth_smile_left();
  float mouth_smile_left() const;
  void set_mouth_smile_left(float value);
  private:
  float _internal_mouth_smile_left() const;
  void _internal_set_mouth_smile_left(float value);
  public:

  // float mouth_smile_right = 45;
  void clear_mouth_smile_right();
  float mouth_smile_right() const;
  void set_mouth_smile_right(float value);
  private:
  float _internal_mouth_smile_right() const;
  void _internal_set_mouth_smile_right(float value);
  public:

  // float mouth_stretch_left = 46;
  void clear_mouth_stretch_left();
  float mouth_stretch_left() const;
  void set_mouth_stretch_left(float value);
  private:
  float _internal_mouth_stretch_left() const;
  void _internal_set_mouth_stretch_left(float value);
  public:

  // float mouth_stretch_right = 47;
  void clear_mouth_stretch_right();
  float mouth_stretch_right() const;
  void set_mouth_stretch_right(float value);
  private:
  float _internal_mouth_stretch_right() const;
  void _internal_set_mouth_stretch_right(float value);
  public:

  // float mouth_upper_up_left = 48;
  void clear_mouth_upper_up_left();
  float mouth_upper_up_left() const;
  void set_mouth_upper_up_left(float value);
  private:
  float _internal_mouth_upper_up_left() const;
  void _internal_set_mouth_upper_up_left(float value);
  public:

  // float mouth_upper_up_right = 49;
  void clear_mouth_upper_up_right();
  float mouth_upper_up_right() const;
  void set_mouth_upper_up_right(float value);
  private:
  float _internal_mouth_upper_up_right() const;
  void _internal_set_mouth_upper_up_right(float value);
  public:

  // float nose_sneer_left = 50;
  void clear_nose_sneer_left();
  float nose_sneer_left() const;
  void set_nose_sneer_left(float value);
  private:
  float _internal_nose_sneer_left() const;
  void _internal_set_nose_sneer_left(float value);
  public:

  // float nose_sneer_right = 51;
  void clear_nose_sneer_right();
  float nose_sneer_right() const;
  void set_nose_sneer_right(float value);
  private:
  float _internal_nose_sneer_right() const;
  void _internal_set_nose_sneer_right(float value);
  public:

  // float tongue_out = 52;
  void clear_tongue_out();
  float tongue_out() const;
  void set_tongue_out(float value);
  private:
  float _internal_tongue_out() const;
  void _internal_set_tongue_out(float value);
  public:

  // @@protoc_insertion_point(class_scope:service.ARKitBlendShapes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float brow_down_left_;
  float brow_down_right_;
  float brow_inner_up_;
  float brow_outer_up_left_;
  float brow_outer_up_right_;
  float cheek_puff_;
  float cheek_squint_left_;
  float cheek_squint_right_;
  float eye_blink_left_;
  float eye_blink_right_;
  float eye_look_down_left_;
  float eye_look_down_right_;
  float eye_look_in_left_;
  float eye_look_in_right_;
  float eye_look_out_left_;
  float eye_look_out_right_;
  float eye_look_up_left_;
  float eye_look_up_right_;
  float eye_squint_left_;
  float eye_squint_right_;
  float eye_wide_left_;
  float eye_wide_right_;
  float jaw_forward_;
  float jaw_left_;
  float jaw_open_;
  float jaw_right_;
  float mouth_close_;
  float mouth_dimple_left_;
  float mouth_dimple_right_;
  float mouth_frown_left_;
  float mouth_frown_right_;
  float mouth_funnel_;
  float mouth_left_;
  float mouth_lower_down_left_;
  float mouth_lower_down_right_;
  float mouth_press_left_;
  float mouth_press_right_;
  float mouth_pucker_;
  float mouth_right_;
  float mouth_roll_lower_;
  float mouth_roll_upper_;
  float mouth_shrug_lower_;
  float mouth_shrug_upper_;
  float mouth_smile_left_;
  float mouth_smile_right_;
  float mouth_stretch_left_;
  float mouth_stretch_right_;
  float mouth_upper_up_left_;
  float mouth_upper_up_right_;
  float nose_sneer_left_;
  float nose_sneer_right_;
  float tongue_out_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_arkit_5fblend_5fshapes_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ARKitBlendShapesData

// .service.ARKitBlendShapes ar_kit_blend_shapes = 1;
inline bool ARKitBlendShapesData::_internal_has_ar_kit_blend_shapes() const {
  return this != internal_default_instance() && ar_kit_blend_shapes_ != nullptr;
}
inline bool ARKitBlendShapesData::has_ar_kit_blend_shapes() const {
  return _internal_has_ar_kit_blend_shapes();
}
inline void ARKitBlendShapesData::clear_ar_kit_blend_shapes() {
  if (GetArena() == nullptr && ar_kit_blend_shapes_ != nullptr) {
    delete ar_kit_blend_shapes_;
  }
  ar_kit_blend_shapes_ = nullptr;
}
inline const ::service::ARKitBlendShapes& ARKitBlendShapesData::_internal_ar_kit_blend_shapes() const {
  const ::service::ARKitBlendShapes* p = ar_kit_blend_shapes_;
  return p != nullptr ? *p : reinterpret_cast<const ::service::ARKitBlendShapes&>(
      ::service::_ARKitBlendShapes_default_instance_);
}
inline const ::service::ARKitBlendShapes& ARKitBlendShapesData::ar_kit_blend_shapes() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapesData.ar_kit_blend_shapes)
  return _internal_ar_kit_blend_shapes();
}
inline void ARKitBlendShapesData::unsafe_arena_set_allocated_ar_kit_blend_shapes(
    ::service::ARKitBlendShapes* ar_kit_blend_shapes) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ar_kit_blend_shapes_);
  }
  ar_kit_blend_shapes_ = ar_kit_blend_shapes;
  if (ar_kit_blend_shapes) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service.ARKitBlendShapesData.ar_kit_blend_shapes)
}
inline ::service::ARKitBlendShapes* ARKitBlendShapesData::release_ar_kit_blend_shapes() {
  
  ::service::ARKitBlendShapes* temp = ar_kit_blend_shapes_;
  ar_kit_blend_shapes_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::service::ARKitBlendShapes* ARKitBlendShapesData::unsafe_arena_release_ar_kit_blend_shapes() {
  // @@protoc_insertion_point(field_release:service.ARKitBlendShapesData.ar_kit_blend_shapes)
  
  ::service::ARKitBlendShapes* temp = ar_kit_blend_shapes_;
  ar_kit_blend_shapes_ = nullptr;
  return temp;
}
inline ::service::ARKitBlendShapes* ARKitBlendShapesData::_internal_mutable_ar_kit_blend_shapes() {
  
  if (ar_kit_blend_shapes_ == nullptr) {
    auto* p = CreateMaybeMessage<::service::ARKitBlendShapes>(GetArena());
    ar_kit_blend_shapes_ = p;
  }
  return ar_kit_blend_shapes_;
}
inline ::service::ARKitBlendShapes* ARKitBlendShapesData::mutable_ar_kit_blend_shapes() {
  // @@protoc_insertion_point(field_mutable:service.ARKitBlendShapesData.ar_kit_blend_shapes)
  return _internal_mutable_ar_kit_blend_shapes();
}
inline void ARKitBlendShapesData::set_allocated_ar_kit_blend_shapes(::service::ARKitBlendShapes* ar_kit_blend_shapes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete ar_kit_blend_shapes_;
  }
  if (ar_kit_blend_shapes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ar_kit_blend_shapes);
    if (message_arena != submessage_arena) {
      ar_kit_blend_shapes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ar_kit_blend_shapes, submessage_arena);
    }
    
  } else {
    
  }
  ar_kit_blend_shapes_ = ar_kit_blend_shapes;
  // @@protoc_insertion_point(field_set_allocated:service.ARKitBlendShapesData.ar_kit_blend_shapes)
}

// -------------------------------------------------------------------

// ARKitBlendShapes

// float brow_down_left = 1;
inline void ARKitBlendShapes::clear_brow_down_left() {
  brow_down_left_ = 0;
}
inline float ARKitBlendShapes::_internal_brow_down_left() const {
  return brow_down_left_;
}
inline float ARKitBlendShapes::brow_down_left() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.brow_down_left)
  return _internal_brow_down_left();
}
inline void ARKitBlendShapes::_internal_set_brow_down_left(float value) {
  
  brow_down_left_ = value;
}
inline void ARKitBlendShapes::set_brow_down_left(float value) {
  _internal_set_brow_down_left(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.brow_down_left)
}

// float brow_down_right = 2;
inline void ARKitBlendShapes::clear_brow_down_right() {
  brow_down_right_ = 0;
}
inline float ARKitBlendShapes::_internal_brow_down_right() const {
  return brow_down_right_;
}
inline float ARKitBlendShapes::brow_down_right() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.brow_down_right)
  return _internal_brow_down_right();
}
inline void ARKitBlendShapes::_internal_set_brow_down_right(float value) {
  
  brow_down_right_ = value;
}
inline void ARKitBlendShapes::set_brow_down_right(float value) {
  _internal_set_brow_down_right(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.brow_down_right)
}

// float brow_inner_up = 3;
inline void ARKitBlendShapes::clear_brow_inner_up() {
  brow_inner_up_ = 0;
}
inline float ARKitBlendShapes::_internal_brow_inner_up() const {
  return brow_inner_up_;
}
inline float ARKitBlendShapes::brow_inner_up() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.brow_inner_up)
  return _internal_brow_inner_up();
}
inline void ARKitBlendShapes::_internal_set_brow_inner_up(float value) {
  
  brow_inner_up_ = value;
}
inline void ARKitBlendShapes::set_brow_inner_up(float value) {
  _internal_set_brow_inner_up(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.brow_inner_up)
}

// float brow_outer_up_left = 4;
inline void ARKitBlendShapes::clear_brow_outer_up_left() {
  brow_outer_up_left_ = 0;
}
inline float ARKitBlendShapes::_internal_brow_outer_up_left() const {
  return brow_outer_up_left_;
}
inline float ARKitBlendShapes::brow_outer_up_left() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.brow_outer_up_left)
  return _internal_brow_outer_up_left();
}
inline void ARKitBlendShapes::_internal_set_brow_outer_up_left(float value) {
  
  brow_outer_up_left_ = value;
}
inline void ARKitBlendShapes::set_brow_outer_up_left(float value) {
  _internal_set_brow_outer_up_left(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.brow_outer_up_left)
}

// float brow_outer_up_right = 5;
inline void ARKitBlendShapes::clear_brow_outer_up_right() {
  brow_outer_up_right_ = 0;
}
inline float ARKitBlendShapes::_internal_brow_outer_up_right() const {
  return brow_outer_up_right_;
}
inline float ARKitBlendShapes::brow_outer_up_right() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.brow_outer_up_right)
  return _internal_brow_outer_up_right();
}
inline void ARKitBlendShapes::_internal_set_brow_outer_up_right(float value) {
  
  brow_outer_up_right_ = value;
}
inline void ARKitBlendShapes::set_brow_outer_up_right(float value) {
  _internal_set_brow_outer_up_right(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.brow_outer_up_right)
}

// float cheek_puff = 6;
inline void ARKitBlendShapes::clear_cheek_puff() {
  cheek_puff_ = 0;
}
inline float ARKitBlendShapes::_internal_cheek_puff() const {
  return cheek_puff_;
}
inline float ARKitBlendShapes::cheek_puff() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.cheek_puff)
  return _internal_cheek_puff();
}
inline void ARKitBlendShapes::_internal_set_cheek_puff(float value) {
  
  cheek_puff_ = value;
}
inline void ARKitBlendShapes::set_cheek_puff(float value) {
  _internal_set_cheek_puff(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.cheek_puff)
}

// float cheek_squint_left = 7;
inline void ARKitBlendShapes::clear_cheek_squint_left() {
  cheek_squint_left_ = 0;
}
inline float ARKitBlendShapes::_internal_cheek_squint_left() const {
  return cheek_squint_left_;
}
inline float ARKitBlendShapes::cheek_squint_left() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.cheek_squint_left)
  return _internal_cheek_squint_left();
}
inline void ARKitBlendShapes::_internal_set_cheek_squint_left(float value) {
  
  cheek_squint_left_ = value;
}
inline void ARKitBlendShapes::set_cheek_squint_left(float value) {
  _internal_set_cheek_squint_left(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.cheek_squint_left)
}

// float cheek_squint_right = 8;
inline void ARKitBlendShapes::clear_cheek_squint_right() {
  cheek_squint_right_ = 0;
}
inline float ARKitBlendShapes::_internal_cheek_squint_right() const {
  return cheek_squint_right_;
}
inline float ARKitBlendShapes::cheek_squint_right() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.cheek_squint_right)
  return _internal_cheek_squint_right();
}
inline void ARKitBlendShapes::_internal_set_cheek_squint_right(float value) {
  
  cheek_squint_right_ = value;
}
inline void ARKitBlendShapes::set_cheek_squint_right(float value) {
  _internal_set_cheek_squint_right(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.cheek_squint_right)
}

// float eye_blink_left = 9;
inline void ARKitBlendShapes::clear_eye_blink_left() {
  eye_blink_left_ = 0;
}
inline float ARKitBlendShapes::_internal_eye_blink_left() const {
  return eye_blink_left_;
}
inline float ARKitBlendShapes::eye_blink_left() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.eye_blink_left)
  return _internal_eye_blink_left();
}
inline void ARKitBlendShapes::_internal_set_eye_blink_left(float value) {
  
  eye_blink_left_ = value;
}
inline void ARKitBlendShapes::set_eye_blink_left(float value) {
  _internal_set_eye_blink_left(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.eye_blink_left)
}

// float eye_blink_right = 10;
inline void ARKitBlendShapes::clear_eye_blink_right() {
  eye_blink_right_ = 0;
}
inline float ARKitBlendShapes::_internal_eye_blink_right() const {
  return eye_blink_right_;
}
inline float ARKitBlendShapes::eye_blink_right() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.eye_blink_right)
  return _internal_eye_blink_right();
}
inline void ARKitBlendShapes::_internal_set_eye_blink_right(float value) {
  
  eye_blink_right_ = value;
}
inline void ARKitBlendShapes::set_eye_blink_right(float value) {
  _internal_set_eye_blink_right(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.eye_blink_right)
}

// float eye_look_down_left = 11;
inline void ARKitBlendShapes::clear_eye_look_down_left() {
  eye_look_down_left_ = 0;
}
inline float ARKitBlendShapes::_internal_eye_look_down_left() const {
  return eye_look_down_left_;
}
inline float ARKitBlendShapes::eye_look_down_left() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.eye_look_down_left)
  return _internal_eye_look_down_left();
}
inline void ARKitBlendShapes::_internal_set_eye_look_down_left(float value) {
  
  eye_look_down_left_ = value;
}
inline void ARKitBlendShapes::set_eye_look_down_left(float value) {
  _internal_set_eye_look_down_left(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.eye_look_down_left)
}

// float eye_look_down_right = 12;
inline void ARKitBlendShapes::clear_eye_look_down_right() {
  eye_look_down_right_ = 0;
}
inline float ARKitBlendShapes::_internal_eye_look_down_right() const {
  return eye_look_down_right_;
}
inline float ARKitBlendShapes::eye_look_down_right() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.eye_look_down_right)
  return _internal_eye_look_down_right();
}
inline void ARKitBlendShapes::_internal_set_eye_look_down_right(float value) {
  
  eye_look_down_right_ = value;
}
inline void ARKitBlendShapes::set_eye_look_down_right(float value) {
  _internal_set_eye_look_down_right(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.eye_look_down_right)
}

// float eye_look_in_left = 13;
inline void ARKitBlendShapes::clear_eye_look_in_left() {
  eye_look_in_left_ = 0;
}
inline float ARKitBlendShapes::_internal_eye_look_in_left() const {
  return eye_look_in_left_;
}
inline float ARKitBlendShapes::eye_look_in_left() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.eye_look_in_left)
  return _internal_eye_look_in_left();
}
inline void ARKitBlendShapes::_internal_set_eye_look_in_left(float value) {
  
  eye_look_in_left_ = value;
}
inline void ARKitBlendShapes::set_eye_look_in_left(float value) {
  _internal_set_eye_look_in_left(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.eye_look_in_left)
}

// float eye_look_in_right = 14;
inline void ARKitBlendShapes::clear_eye_look_in_right() {
  eye_look_in_right_ = 0;
}
inline float ARKitBlendShapes::_internal_eye_look_in_right() const {
  return eye_look_in_right_;
}
inline float ARKitBlendShapes::eye_look_in_right() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.eye_look_in_right)
  return _internal_eye_look_in_right();
}
inline void ARKitBlendShapes::_internal_set_eye_look_in_right(float value) {
  
  eye_look_in_right_ = value;
}
inline void ARKitBlendShapes::set_eye_look_in_right(float value) {
  _internal_set_eye_look_in_right(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.eye_look_in_right)
}

// float eye_look_out_left = 15;
inline void ARKitBlendShapes::clear_eye_look_out_left() {
  eye_look_out_left_ = 0;
}
inline float ARKitBlendShapes::_internal_eye_look_out_left() const {
  return eye_look_out_left_;
}
inline float ARKitBlendShapes::eye_look_out_left() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.eye_look_out_left)
  return _internal_eye_look_out_left();
}
inline void ARKitBlendShapes::_internal_set_eye_look_out_left(float value) {
  
  eye_look_out_left_ = value;
}
inline void ARKitBlendShapes::set_eye_look_out_left(float value) {
  _internal_set_eye_look_out_left(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.eye_look_out_left)
}

// float eye_look_out_right = 16;
inline void ARKitBlendShapes::clear_eye_look_out_right() {
  eye_look_out_right_ = 0;
}
inline float ARKitBlendShapes::_internal_eye_look_out_right() const {
  return eye_look_out_right_;
}
inline float ARKitBlendShapes::eye_look_out_right() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.eye_look_out_right)
  return _internal_eye_look_out_right();
}
inline void ARKitBlendShapes::_internal_set_eye_look_out_right(float value) {
  
  eye_look_out_right_ = value;
}
inline void ARKitBlendShapes::set_eye_look_out_right(float value) {
  _internal_set_eye_look_out_right(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.eye_look_out_right)
}

// float eye_look_up_left = 17;
inline void ARKitBlendShapes::clear_eye_look_up_left() {
  eye_look_up_left_ = 0;
}
inline float ARKitBlendShapes::_internal_eye_look_up_left() const {
  return eye_look_up_left_;
}
inline float ARKitBlendShapes::eye_look_up_left() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.eye_look_up_left)
  return _internal_eye_look_up_left();
}
inline void ARKitBlendShapes::_internal_set_eye_look_up_left(float value) {
  
  eye_look_up_left_ = value;
}
inline void ARKitBlendShapes::set_eye_look_up_left(float value) {
  _internal_set_eye_look_up_left(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.eye_look_up_left)
}

// float eye_look_up_right = 18;
inline void ARKitBlendShapes::clear_eye_look_up_right() {
  eye_look_up_right_ = 0;
}
inline float ARKitBlendShapes::_internal_eye_look_up_right() const {
  return eye_look_up_right_;
}
inline float ARKitBlendShapes::eye_look_up_right() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.eye_look_up_right)
  return _internal_eye_look_up_right();
}
inline void ARKitBlendShapes::_internal_set_eye_look_up_right(float value) {
  
  eye_look_up_right_ = value;
}
inline void ARKitBlendShapes::set_eye_look_up_right(float value) {
  _internal_set_eye_look_up_right(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.eye_look_up_right)
}

// float eye_squint_left = 19;
inline void ARKitBlendShapes::clear_eye_squint_left() {
  eye_squint_left_ = 0;
}
inline float ARKitBlendShapes::_internal_eye_squint_left() const {
  return eye_squint_left_;
}
inline float ARKitBlendShapes::eye_squint_left() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.eye_squint_left)
  return _internal_eye_squint_left();
}
inline void ARKitBlendShapes::_internal_set_eye_squint_left(float value) {
  
  eye_squint_left_ = value;
}
inline void ARKitBlendShapes::set_eye_squint_left(float value) {
  _internal_set_eye_squint_left(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.eye_squint_left)
}

// float eye_squint_right = 20;
inline void ARKitBlendShapes::clear_eye_squint_right() {
  eye_squint_right_ = 0;
}
inline float ARKitBlendShapes::_internal_eye_squint_right() const {
  return eye_squint_right_;
}
inline float ARKitBlendShapes::eye_squint_right() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.eye_squint_right)
  return _internal_eye_squint_right();
}
inline void ARKitBlendShapes::_internal_set_eye_squint_right(float value) {
  
  eye_squint_right_ = value;
}
inline void ARKitBlendShapes::set_eye_squint_right(float value) {
  _internal_set_eye_squint_right(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.eye_squint_right)
}

// float eye_wide_left = 21;
inline void ARKitBlendShapes::clear_eye_wide_left() {
  eye_wide_left_ = 0;
}
inline float ARKitBlendShapes::_internal_eye_wide_left() const {
  return eye_wide_left_;
}
inline float ARKitBlendShapes::eye_wide_left() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.eye_wide_left)
  return _internal_eye_wide_left();
}
inline void ARKitBlendShapes::_internal_set_eye_wide_left(float value) {
  
  eye_wide_left_ = value;
}
inline void ARKitBlendShapes::set_eye_wide_left(float value) {
  _internal_set_eye_wide_left(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.eye_wide_left)
}

// float eye_wide_right = 22;
inline void ARKitBlendShapes::clear_eye_wide_right() {
  eye_wide_right_ = 0;
}
inline float ARKitBlendShapes::_internal_eye_wide_right() const {
  return eye_wide_right_;
}
inline float ARKitBlendShapes::eye_wide_right() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.eye_wide_right)
  return _internal_eye_wide_right();
}
inline void ARKitBlendShapes::_internal_set_eye_wide_right(float value) {
  
  eye_wide_right_ = value;
}
inline void ARKitBlendShapes::set_eye_wide_right(float value) {
  _internal_set_eye_wide_right(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.eye_wide_right)
}

// float jaw_forward = 23;
inline void ARKitBlendShapes::clear_jaw_forward() {
  jaw_forward_ = 0;
}
inline float ARKitBlendShapes::_internal_jaw_forward() const {
  return jaw_forward_;
}
inline float ARKitBlendShapes::jaw_forward() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.jaw_forward)
  return _internal_jaw_forward();
}
inline void ARKitBlendShapes::_internal_set_jaw_forward(float value) {
  
  jaw_forward_ = value;
}
inline void ARKitBlendShapes::set_jaw_forward(float value) {
  _internal_set_jaw_forward(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.jaw_forward)
}

// float jaw_left = 24;
inline void ARKitBlendShapes::clear_jaw_left() {
  jaw_left_ = 0;
}
inline float ARKitBlendShapes::_internal_jaw_left() const {
  return jaw_left_;
}
inline float ARKitBlendShapes::jaw_left() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.jaw_left)
  return _internal_jaw_left();
}
inline void ARKitBlendShapes::_internal_set_jaw_left(float value) {
  
  jaw_left_ = value;
}
inline void ARKitBlendShapes::set_jaw_left(float value) {
  _internal_set_jaw_left(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.jaw_left)
}

// float jaw_open = 25;
inline void ARKitBlendShapes::clear_jaw_open() {
  jaw_open_ = 0;
}
inline float ARKitBlendShapes::_internal_jaw_open() const {
  return jaw_open_;
}
inline float ARKitBlendShapes::jaw_open() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.jaw_open)
  return _internal_jaw_open();
}
inline void ARKitBlendShapes::_internal_set_jaw_open(float value) {
  
  jaw_open_ = value;
}
inline void ARKitBlendShapes::set_jaw_open(float value) {
  _internal_set_jaw_open(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.jaw_open)
}

// float jaw_right = 26;
inline void ARKitBlendShapes::clear_jaw_right() {
  jaw_right_ = 0;
}
inline float ARKitBlendShapes::_internal_jaw_right() const {
  return jaw_right_;
}
inline float ARKitBlendShapes::jaw_right() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.jaw_right)
  return _internal_jaw_right();
}
inline void ARKitBlendShapes::_internal_set_jaw_right(float value) {
  
  jaw_right_ = value;
}
inline void ARKitBlendShapes::set_jaw_right(float value) {
  _internal_set_jaw_right(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.jaw_right)
}

// float mouth_close = 27;
inline void ARKitBlendShapes::clear_mouth_close() {
  mouth_close_ = 0;
}
inline float ARKitBlendShapes::_internal_mouth_close() const {
  return mouth_close_;
}
inline float ARKitBlendShapes::mouth_close() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.mouth_close)
  return _internal_mouth_close();
}
inline void ARKitBlendShapes::_internal_set_mouth_close(float value) {
  
  mouth_close_ = value;
}
inline void ARKitBlendShapes::set_mouth_close(float value) {
  _internal_set_mouth_close(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.mouth_close)
}

// float mouth_dimple_left = 28;
inline void ARKitBlendShapes::clear_mouth_dimple_left() {
  mouth_dimple_left_ = 0;
}
inline float ARKitBlendShapes::_internal_mouth_dimple_left() const {
  return mouth_dimple_left_;
}
inline float ARKitBlendShapes::mouth_dimple_left() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.mouth_dimple_left)
  return _internal_mouth_dimple_left();
}
inline void ARKitBlendShapes::_internal_set_mouth_dimple_left(float value) {
  
  mouth_dimple_left_ = value;
}
inline void ARKitBlendShapes::set_mouth_dimple_left(float value) {
  _internal_set_mouth_dimple_left(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.mouth_dimple_left)
}

// float mouth_dimple_right = 29;
inline void ARKitBlendShapes::clear_mouth_dimple_right() {
  mouth_dimple_right_ = 0;
}
inline float ARKitBlendShapes::_internal_mouth_dimple_right() const {
  return mouth_dimple_right_;
}
inline float ARKitBlendShapes::mouth_dimple_right() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.mouth_dimple_right)
  return _internal_mouth_dimple_right();
}
inline void ARKitBlendShapes::_internal_set_mouth_dimple_right(float value) {
  
  mouth_dimple_right_ = value;
}
inline void ARKitBlendShapes::set_mouth_dimple_right(float value) {
  _internal_set_mouth_dimple_right(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.mouth_dimple_right)
}

// float mouth_frown_left = 30;
inline void ARKitBlendShapes::clear_mouth_frown_left() {
  mouth_frown_left_ = 0;
}
inline float ARKitBlendShapes::_internal_mouth_frown_left() const {
  return mouth_frown_left_;
}
inline float ARKitBlendShapes::mouth_frown_left() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.mouth_frown_left)
  return _internal_mouth_frown_left();
}
inline void ARKitBlendShapes::_internal_set_mouth_frown_left(float value) {
  
  mouth_frown_left_ = value;
}
inline void ARKitBlendShapes::set_mouth_frown_left(float value) {
  _internal_set_mouth_frown_left(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.mouth_frown_left)
}

// float mouth_frown_right = 31;
inline void ARKitBlendShapes::clear_mouth_frown_right() {
  mouth_frown_right_ = 0;
}
inline float ARKitBlendShapes::_internal_mouth_frown_right() const {
  return mouth_frown_right_;
}
inline float ARKitBlendShapes::mouth_frown_right() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.mouth_frown_right)
  return _internal_mouth_frown_right();
}
inline void ARKitBlendShapes::_internal_set_mouth_frown_right(float value) {
  
  mouth_frown_right_ = value;
}
inline void ARKitBlendShapes::set_mouth_frown_right(float value) {
  _internal_set_mouth_frown_right(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.mouth_frown_right)
}

// float mouth_funnel = 32;
inline void ARKitBlendShapes::clear_mouth_funnel() {
  mouth_funnel_ = 0;
}
inline float ARKitBlendShapes::_internal_mouth_funnel() const {
  return mouth_funnel_;
}
inline float ARKitBlendShapes::mouth_funnel() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.mouth_funnel)
  return _internal_mouth_funnel();
}
inline void ARKitBlendShapes::_internal_set_mouth_funnel(float value) {
  
  mouth_funnel_ = value;
}
inline void ARKitBlendShapes::set_mouth_funnel(float value) {
  _internal_set_mouth_funnel(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.mouth_funnel)
}

// float mouth_left = 33;
inline void ARKitBlendShapes::clear_mouth_left() {
  mouth_left_ = 0;
}
inline float ARKitBlendShapes::_internal_mouth_left() const {
  return mouth_left_;
}
inline float ARKitBlendShapes::mouth_left() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.mouth_left)
  return _internal_mouth_left();
}
inline void ARKitBlendShapes::_internal_set_mouth_left(float value) {
  
  mouth_left_ = value;
}
inline void ARKitBlendShapes::set_mouth_left(float value) {
  _internal_set_mouth_left(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.mouth_left)
}

// float mouth_lower_down_left = 34;
inline void ARKitBlendShapes::clear_mouth_lower_down_left() {
  mouth_lower_down_left_ = 0;
}
inline float ARKitBlendShapes::_internal_mouth_lower_down_left() const {
  return mouth_lower_down_left_;
}
inline float ARKitBlendShapes::mouth_lower_down_left() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.mouth_lower_down_left)
  return _internal_mouth_lower_down_left();
}
inline void ARKitBlendShapes::_internal_set_mouth_lower_down_left(float value) {
  
  mouth_lower_down_left_ = value;
}
inline void ARKitBlendShapes::set_mouth_lower_down_left(float value) {
  _internal_set_mouth_lower_down_left(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.mouth_lower_down_left)
}

// float mouth_lower_down_right = 35;
inline void ARKitBlendShapes::clear_mouth_lower_down_right() {
  mouth_lower_down_right_ = 0;
}
inline float ARKitBlendShapes::_internal_mouth_lower_down_right() const {
  return mouth_lower_down_right_;
}
inline float ARKitBlendShapes::mouth_lower_down_right() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.mouth_lower_down_right)
  return _internal_mouth_lower_down_right();
}
inline void ARKitBlendShapes::_internal_set_mouth_lower_down_right(float value) {
  
  mouth_lower_down_right_ = value;
}
inline void ARKitBlendShapes::set_mouth_lower_down_right(float value) {
  _internal_set_mouth_lower_down_right(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.mouth_lower_down_right)
}

// float mouth_press_left = 36;
inline void ARKitBlendShapes::clear_mouth_press_left() {
  mouth_press_left_ = 0;
}
inline float ARKitBlendShapes::_internal_mouth_press_left() const {
  return mouth_press_left_;
}
inline float ARKitBlendShapes::mouth_press_left() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.mouth_press_left)
  return _internal_mouth_press_left();
}
inline void ARKitBlendShapes::_internal_set_mouth_press_left(float value) {
  
  mouth_press_left_ = value;
}
inline void ARKitBlendShapes::set_mouth_press_left(float value) {
  _internal_set_mouth_press_left(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.mouth_press_left)
}

// float mouth_press_right = 37;
inline void ARKitBlendShapes::clear_mouth_press_right() {
  mouth_press_right_ = 0;
}
inline float ARKitBlendShapes::_internal_mouth_press_right() const {
  return mouth_press_right_;
}
inline float ARKitBlendShapes::mouth_press_right() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.mouth_press_right)
  return _internal_mouth_press_right();
}
inline void ARKitBlendShapes::_internal_set_mouth_press_right(float value) {
  
  mouth_press_right_ = value;
}
inline void ARKitBlendShapes::set_mouth_press_right(float value) {
  _internal_set_mouth_press_right(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.mouth_press_right)
}

// float mouth_pucker = 38;
inline void ARKitBlendShapes::clear_mouth_pucker() {
  mouth_pucker_ = 0;
}
inline float ARKitBlendShapes::_internal_mouth_pucker() const {
  return mouth_pucker_;
}
inline float ARKitBlendShapes::mouth_pucker() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.mouth_pucker)
  return _internal_mouth_pucker();
}
inline void ARKitBlendShapes::_internal_set_mouth_pucker(float value) {
  
  mouth_pucker_ = value;
}
inline void ARKitBlendShapes::set_mouth_pucker(float value) {
  _internal_set_mouth_pucker(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.mouth_pucker)
}

// float mouth_right = 39;
inline void ARKitBlendShapes::clear_mouth_right() {
  mouth_right_ = 0;
}
inline float ARKitBlendShapes::_internal_mouth_right() const {
  return mouth_right_;
}
inline float ARKitBlendShapes::mouth_right() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.mouth_right)
  return _internal_mouth_right();
}
inline void ARKitBlendShapes::_internal_set_mouth_right(float value) {
  
  mouth_right_ = value;
}
inline void ARKitBlendShapes::set_mouth_right(float value) {
  _internal_set_mouth_right(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.mouth_right)
}

// float mouth_roll_lower = 40;
inline void ARKitBlendShapes::clear_mouth_roll_lower() {
  mouth_roll_lower_ = 0;
}
inline float ARKitBlendShapes::_internal_mouth_roll_lower() const {
  return mouth_roll_lower_;
}
inline float ARKitBlendShapes::mouth_roll_lower() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.mouth_roll_lower)
  return _internal_mouth_roll_lower();
}
inline void ARKitBlendShapes::_internal_set_mouth_roll_lower(float value) {
  
  mouth_roll_lower_ = value;
}
inline void ARKitBlendShapes::set_mouth_roll_lower(float value) {
  _internal_set_mouth_roll_lower(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.mouth_roll_lower)
}

// float mouth_roll_upper = 41;
inline void ARKitBlendShapes::clear_mouth_roll_upper() {
  mouth_roll_upper_ = 0;
}
inline float ARKitBlendShapes::_internal_mouth_roll_upper() const {
  return mouth_roll_upper_;
}
inline float ARKitBlendShapes::mouth_roll_upper() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.mouth_roll_upper)
  return _internal_mouth_roll_upper();
}
inline void ARKitBlendShapes::_internal_set_mouth_roll_upper(float value) {
  
  mouth_roll_upper_ = value;
}
inline void ARKitBlendShapes::set_mouth_roll_upper(float value) {
  _internal_set_mouth_roll_upper(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.mouth_roll_upper)
}

// float mouth_shrug_lower = 42;
inline void ARKitBlendShapes::clear_mouth_shrug_lower() {
  mouth_shrug_lower_ = 0;
}
inline float ARKitBlendShapes::_internal_mouth_shrug_lower() const {
  return mouth_shrug_lower_;
}
inline float ARKitBlendShapes::mouth_shrug_lower() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.mouth_shrug_lower)
  return _internal_mouth_shrug_lower();
}
inline void ARKitBlendShapes::_internal_set_mouth_shrug_lower(float value) {
  
  mouth_shrug_lower_ = value;
}
inline void ARKitBlendShapes::set_mouth_shrug_lower(float value) {
  _internal_set_mouth_shrug_lower(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.mouth_shrug_lower)
}

// float mouth_shrug_upper = 43;
inline void ARKitBlendShapes::clear_mouth_shrug_upper() {
  mouth_shrug_upper_ = 0;
}
inline float ARKitBlendShapes::_internal_mouth_shrug_upper() const {
  return mouth_shrug_upper_;
}
inline float ARKitBlendShapes::mouth_shrug_upper() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.mouth_shrug_upper)
  return _internal_mouth_shrug_upper();
}
inline void ARKitBlendShapes::_internal_set_mouth_shrug_upper(float value) {
  
  mouth_shrug_upper_ = value;
}
inline void ARKitBlendShapes::set_mouth_shrug_upper(float value) {
  _internal_set_mouth_shrug_upper(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.mouth_shrug_upper)
}

// float mouth_smile_left = 44;
inline void ARKitBlendShapes::clear_mouth_smile_left() {
  mouth_smile_left_ = 0;
}
inline float ARKitBlendShapes::_internal_mouth_smile_left() const {
  return mouth_smile_left_;
}
inline float ARKitBlendShapes::mouth_smile_left() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.mouth_smile_left)
  return _internal_mouth_smile_left();
}
inline void ARKitBlendShapes::_internal_set_mouth_smile_left(float value) {
  
  mouth_smile_left_ = value;
}
inline void ARKitBlendShapes::set_mouth_smile_left(float value) {
  _internal_set_mouth_smile_left(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.mouth_smile_left)
}

// float mouth_smile_right = 45;
inline void ARKitBlendShapes::clear_mouth_smile_right() {
  mouth_smile_right_ = 0;
}
inline float ARKitBlendShapes::_internal_mouth_smile_right() const {
  return mouth_smile_right_;
}
inline float ARKitBlendShapes::mouth_smile_right() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.mouth_smile_right)
  return _internal_mouth_smile_right();
}
inline void ARKitBlendShapes::_internal_set_mouth_smile_right(float value) {
  
  mouth_smile_right_ = value;
}
inline void ARKitBlendShapes::set_mouth_smile_right(float value) {
  _internal_set_mouth_smile_right(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.mouth_smile_right)
}

// float mouth_stretch_left = 46;
inline void ARKitBlendShapes::clear_mouth_stretch_left() {
  mouth_stretch_left_ = 0;
}
inline float ARKitBlendShapes::_internal_mouth_stretch_left() const {
  return mouth_stretch_left_;
}
inline float ARKitBlendShapes::mouth_stretch_left() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.mouth_stretch_left)
  return _internal_mouth_stretch_left();
}
inline void ARKitBlendShapes::_internal_set_mouth_stretch_left(float value) {
  
  mouth_stretch_left_ = value;
}
inline void ARKitBlendShapes::set_mouth_stretch_left(float value) {
  _internal_set_mouth_stretch_left(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.mouth_stretch_left)
}

// float mouth_stretch_right = 47;
inline void ARKitBlendShapes::clear_mouth_stretch_right() {
  mouth_stretch_right_ = 0;
}
inline float ARKitBlendShapes::_internal_mouth_stretch_right() const {
  return mouth_stretch_right_;
}
inline float ARKitBlendShapes::mouth_stretch_right() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.mouth_stretch_right)
  return _internal_mouth_stretch_right();
}
inline void ARKitBlendShapes::_internal_set_mouth_stretch_right(float value) {
  
  mouth_stretch_right_ = value;
}
inline void ARKitBlendShapes::set_mouth_stretch_right(float value) {
  _internal_set_mouth_stretch_right(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.mouth_stretch_right)
}

// float mouth_upper_up_left = 48;
inline void ARKitBlendShapes::clear_mouth_upper_up_left() {
  mouth_upper_up_left_ = 0;
}
inline float ARKitBlendShapes::_internal_mouth_upper_up_left() const {
  return mouth_upper_up_left_;
}
inline float ARKitBlendShapes::mouth_upper_up_left() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.mouth_upper_up_left)
  return _internal_mouth_upper_up_left();
}
inline void ARKitBlendShapes::_internal_set_mouth_upper_up_left(float value) {
  
  mouth_upper_up_left_ = value;
}
inline void ARKitBlendShapes::set_mouth_upper_up_left(float value) {
  _internal_set_mouth_upper_up_left(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.mouth_upper_up_left)
}

// float mouth_upper_up_right = 49;
inline void ARKitBlendShapes::clear_mouth_upper_up_right() {
  mouth_upper_up_right_ = 0;
}
inline float ARKitBlendShapes::_internal_mouth_upper_up_right() const {
  return mouth_upper_up_right_;
}
inline float ARKitBlendShapes::mouth_upper_up_right() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.mouth_upper_up_right)
  return _internal_mouth_upper_up_right();
}
inline void ARKitBlendShapes::_internal_set_mouth_upper_up_right(float value) {
  
  mouth_upper_up_right_ = value;
}
inline void ARKitBlendShapes::set_mouth_upper_up_right(float value) {
  _internal_set_mouth_upper_up_right(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.mouth_upper_up_right)
}

// float nose_sneer_left = 50;
inline void ARKitBlendShapes::clear_nose_sneer_left() {
  nose_sneer_left_ = 0;
}
inline float ARKitBlendShapes::_internal_nose_sneer_left() const {
  return nose_sneer_left_;
}
inline float ARKitBlendShapes::nose_sneer_left() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.nose_sneer_left)
  return _internal_nose_sneer_left();
}
inline void ARKitBlendShapes::_internal_set_nose_sneer_left(float value) {
  
  nose_sneer_left_ = value;
}
inline void ARKitBlendShapes::set_nose_sneer_left(float value) {
  _internal_set_nose_sneer_left(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.nose_sneer_left)
}

// float nose_sneer_right = 51;
inline void ARKitBlendShapes::clear_nose_sneer_right() {
  nose_sneer_right_ = 0;
}
inline float ARKitBlendShapes::_internal_nose_sneer_right() const {
  return nose_sneer_right_;
}
inline float ARKitBlendShapes::nose_sneer_right() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.nose_sneer_right)
  return _internal_nose_sneer_right();
}
inline void ARKitBlendShapes::_internal_set_nose_sneer_right(float value) {
  
  nose_sneer_right_ = value;
}
inline void ARKitBlendShapes::set_nose_sneer_right(float value) {
  _internal_set_nose_sneer_right(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.nose_sneer_right)
}

// float tongue_out = 52;
inline void ARKitBlendShapes::clear_tongue_out() {
  tongue_out_ = 0;
}
inline float ARKitBlendShapes::_internal_tongue_out() const {
  return tongue_out_;
}
inline float ARKitBlendShapes::tongue_out() const {
  // @@protoc_insertion_point(field_get:service.ARKitBlendShapes.tongue_out)
  return _internal_tongue_out();
}
inline void ARKitBlendShapes::_internal_set_tongue_out(float value) {
  
  tongue_out_ = value;
}
inline void ARKitBlendShapes::set_tongue_out(float value) {
  _internal_set_tongue_out(value);
  // @@protoc_insertion_point(field_set:service.ARKitBlendShapes.tongue_out)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace service

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_arkit_5fblend_5fshapes_2eproto
