#if defined(_WIN32) || defined(__ANDROID__)
#if defined(_MSC_VER)
        #pragma warning (disable:4018) // 'expression' : signed/unsigned mismatch
        #pragma warning (disable:4065) // switch statement contains 'default' but no 'case' labels
        #pragma warning (disable:4146) // unary minus operator applied to unsigned type, result still unsigned
        #pragma warning (disable:4244) // 'conversion' conversion from 'type1' to 'type2', possible loss of data
        #pragma warning (disable:4251) // 'identifier' : class 'type' needs to have dll-interface to be used by clients of class 'type2'
        #pragma warning (disable:4267) // 'var' : conversion from 'size_t' to 'type', possible loss of data
        #pragma warning (disable:4305) // 'identifier' : truncation from 'type1' to 'type2'
        #pragma warning (disable:4307) // 'operator' : integral constant overflow
        #pragma warning (disable:4309) // 'conversion' : truncation of constant value
        #pragma warning (disable:4334) // 'operator' : result of 32-bit shift implicitly converted to 64 bits (was 64-bit shift intended?)
        #pragma warning (disable:4355) // 'this' : used in base member initializer list
        #pragma warning (disable:4506) // no definition for inline function 'function'
        #pragma warning (disable:4996) // The compiler encountered a deprecated declaration.
        #pragma warning (disable:4125) // decimal digit terminates octal escape sequence
        #pragma warning (disable:4800) // decimal digit terminates octal escape sequence
        #endif

        // Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: arkit_blend_shapes.proto

#include "arkit_blend_shapes.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_arkit_5fblend_5fshapes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ARKitBlendShapes_arkit_5fblend_5fshapes_2eproto;
namespace service {
class ARKitBlendShapesDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ARKitBlendShapesData> _instance;
} _ARKitBlendShapesData_default_instance_;
class ARKitBlendShapesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ARKitBlendShapes> _instance;
} _ARKitBlendShapes_default_instance_;
}  // namespace service
static void InitDefaultsscc_info_ARKitBlendShapes_arkit_5fblend_5fshapes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::service::_ARKitBlendShapes_default_instance_;
    new (ptr) ::service::ARKitBlendShapes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ARKitBlendShapes_arkit_5fblend_5fshapes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ARKitBlendShapes_arkit_5fblend_5fshapes_2eproto}, {}};

static void InitDefaultsscc_info_ARKitBlendShapesData_arkit_5fblend_5fshapes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::service::_ARKitBlendShapesData_default_instance_;
    new (ptr) ::service::ARKitBlendShapesData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ARKitBlendShapesData_arkit_5fblend_5fshapes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ARKitBlendShapesData_arkit_5fblend_5fshapes_2eproto}, {
      &scc_info_ARKitBlendShapes_arkit_5fblend_5fshapes_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_arkit_5fblend_5fshapes_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_arkit_5fblend_5fshapes_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_arkit_5fblend_5fshapes_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_arkit_5fblend_5fshapes_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service::ARKitBlendShapesData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::service::ARKitBlendShapesData, ar_kit_blend_shapes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service::ARKitBlendShapes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::service::ARKitBlendShapes, brow_down_left_),
  PROTOBUF_FIELD_OFFSET(::service::ARKitBlendShapes, brow_down_right_),
  PROTOBUF_FIELD_OFFSET(::service::ARKitBlendShapes, brow_inner_up_),
  PROTOBUF_FIELD_OFFSET(::service::ARKitBlendShapes, brow_outer_up_left_),
  PROTOBUF_FIELD_OFFSET(::service::ARKitBlendShapes, brow_outer_up_right_),
  PROTOBUF_FIELD_OFFSET(::service::ARKitBlendShapes, cheek_puff_),
  PROTOBUF_FIELD_OFFSET(::service::ARKitBlendShapes, cheek_squint_left_),
  PROTOBUF_FIELD_OFFSET(::service::ARKitBlendShapes, cheek_squint_right_),
  PROTOBUF_FIELD_OFFSET(::service::ARKitBlendShapes, eye_blink_left_),
  PROTOBUF_FIELD_OFFSET(::service::ARKitBlendShapes, eye_blink_right_),
  PROTOBUF_FIELD_OFFSET(::service::ARKitBlendShapes, eye_look_down_left_),
  PROTOBUF_FIELD_OFFSET(::service::ARKitBlendShapes, eye_look_down_right_),
  PROTOBUF_FIELD_OFFSET(::service::ARKitBlendShapes, eye_look_in_left_),
  PROTOBUF_FIELD_OFFSET(::service::ARKitBlendShapes, eye_look_in_right_),
  PROTOBUF_FIELD_OFFSET(::service::ARKitBlendShapes, eye_look_out_left_),
  PROTOBUF_FIELD_OFFSET(::service::ARKitBlendShapes, eye_look_out_right_),
  PROTOBUF_FIELD_OFFSET(::service::ARKitBlendShapes, eye_look_up_left_),
  PROTOBUF_FIELD_OFFSET(::service::ARKitBlendShapes, eye_look_up_right_),
  PROTOBUF_FIELD_OFFSET(::service::ARKitBlendShapes, eye_squint_left_),
  PROTOBUF_FIELD_OFFSET(::service::ARKitBlendShapes, eye_squint_right_),
  PROTOBUF_FIELD_OFFSET(::service::ARKitBlendShapes, eye_wide_left_),
  PROTOBUF_FIELD_OFFSET(::service::ARKitBlendShapes, eye_wide_right_),
  PROTOBUF_FIELD_OFFSET(::service::ARKitBlendShapes, jaw_forward_),
  PROTOBUF_FIELD_OFFSET(::service::ARKitBlendShapes, jaw_left_),
  PROTOBUF_FIELD_OFFSET(::service::ARKitBlendShapes, jaw_open_),
  PROTOBUF_FIELD_OFFSET(::service::ARKitBlendShapes, jaw_right_),
  PROTOBUF_FIELD_OFFSET(::service::ARKitBlendShapes, mouth_close_),
  PROTOBUF_FIELD_OFFSET(::service::ARKitBlendShapes, mouth_dimple_left_),
  PROTOBUF_FIELD_OFFSET(::service::ARKitBlendShapes, mouth_dimple_right_),
  PROTOBUF_FIELD_OFFSET(::service::ARKitBlendShapes, mouth_frown_left_),
  PROTOBUF_FIELD_OFFSET(::service::ARKitBlendShapes, mouth_frown_right_),
  PROTOBUF_FIELD_OFFSET(::service::ARKitBlendShapes, mouth_funnel_),
  PROTOBUF_FIELD_OFFSET(::service::ARKitBlendShapes, mouth_left_),
  PROTOBUF_FIELD_OFFSET(::service::ARKitBlendShapes, mouth_lower_down_left_),
  PROTOBUF_FIELD_OFFSET(::service::ARKitBlendShapes, mouth_lower_down_right_),
  PROTOBUF_FIELD_OFFSET(::service::ARKitBlendShapes, mouth_press_left_),
  PROTOBUF_FIELD_OFFSET(::service::ARKitBlendShapes, mouth_press_right_),
  PROTOBUF_FIELD_OFFSET(::service::ARKitBlendShapes, mouth_pucker_),
  PROTOBUF_FIELD_OFFSET(::service::ARKitBlendShapes, mouth_right_),
  PROTOBUF_FIELD_OFFSET(::service::ARKitBlendShapes, mouth_roll_lower_),
  PROTOBUF_FIELD_OFFSET(::service::ARKitBlendShapes, mouth_roll_upper_),
  PROTOBUF_FIELD_OFFSET(::service::ARKitBlendShapes, mouth_shrug_lower_),
  PROTOBUF_FIELD_OFFSET(::service::ARKitBlendShapes, mouth_shrug_upper_),
  PROTOBUF_FIELD_OFFSET(::service::ARKitBlendShapes, mouth_smile_left_),
  PROTOBUF_FIELD_OFFSET(::service::ARKitBlendShapes, mouth_smile_right_),
  PROTOBUF_FIELD_OFFSET(::service::ARKitBlendShapes, mouth_stretch_left_),
  PROTOBUF_FIELD_OFFSET(::service::ARKitBlendShapes, mouth_stretch_right_),
  PROTOBUF_FIELD_OFFSET(::service::ARKitBlendShapes, mouth_upper_up_left_),
  PROTOBUF_FIELD_OFFSET(::service::ARKitBlendShapes, mouth_upper_up_right_),
  PROTOBUF_FIELD_OFFSET(::service::ARKitBlendShapes, nose_sneer_left_),
  PROTOBUF_FIELD_OFFSET(::service::ARKitBlendShapes, nose_sneer_right_),
  PROTOBUF_FIELD_OFFSET(::service::ARKitBlendShapes, tongue_out_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::service::ARKitBlendShapesData)},
  { 6, -1, sizeof(::service::ARKitBlendShapes)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service::_ARKitBlendShapesData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service::_ARKitBlendShapes_default_instance_),
};

const char descriptor_table_protodef_arkit_5fblend_5fshapes_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\030arkit_blend_shapes.proto\022\007service\"N\n\024A"
  "RKitBlendShapesData\0226\n\023ar_kit_blend_shap"
  "es\030\001 \001(\0132\031.service.ARKitBlendShapes\"\273\n\n\020"
  "ARKitBlendShapes\022\026\n\016brow_down_left\030\001 \001(\002"
  "\022\027\n\017brow_down_right\030\002 \001(\002\022\025\n\rbrow_inner_"
  "up\030\003 \001(\002\022\032\n\022brow_outer_up_left\030\004 \001(\002\022\033\n\023"
  "brow_outer_up_right\030\005 \001(\002\022\022\n\ncheek_puff\030"
  "\006 \001(\002\022\031\n\021cheek_squint_left\030\007 \001(\002\022\032\n\022chee"
  "k_squint_right\030\010 \001(\002\022\026\n\016eye_blink_left\030\t"
  " \001(\002\022\027\n\017eye_blink_right\030\n \001(\002\022\032\n\022eye_loo"
  "k_down_left\030\013 \001(\002\022\033\n\023eye_look_down_right"
  "\030\014 \001(\002\022\030\n\020eye_look_in_left\030\r \001(\002\022\031\n\021eye_"
  "look_in_right\030\016 \001(\002\022\031\n\021eye_look_out_left"
  "\030\017 \001(\002\022\032\n\022eye_look_out_right\030\020 \001(\002\022\030\n\020ey"
  "e_look_up_left\030\021 \001(\002\022\031\n\021eye_look_up_righ"
  "t\030\022 \001(\002\022\027\n\017eye_squint_left\030\023 \001(\002\022\030\n\020eye_"
  "squint_right\030\024 \001(\002\022\025\n\reye_wide_left\030\025 \001("
  "\002\022\026\n\016eye_wide_right\030\026 \001(\002\022\023\n\013jaw_forward"
  "\030\027 \001(\002\022\020\n\010jaw_left\030\030 \001(\002\022\020\n\010jaw_open\030\031 \001"
  "(\002\022\021\n\tjaw_right\030\032 \001(\002\022\023\n\013mouth_close\030\033 \001"
  "(\002\022\031\n\021mouth_dimple_left\030\034 \001(\002\022\032\n\022mouth_d"
  "imple_right\030\035 \001(\002\022\030\n\020mouth_frown_left\030\036 "
  "\001(\002\022\031\n\021mouth_frown_right\030\037 \001(\002\022\024\n\014mouth_"
  "funnel\030  \001(\002\022\022\n\nmouth_left\030! \001(\002\022\035\n\025mout"
  "h_lower_down_left\030\" \001(\002\022\036\n\026mouth_lower_d"
  "own_right\030# \001(\002\022\030\n\020mouth_press_left\030$ \001("
  "\002\022\031\n\021mouth_press_right\030% \001(\002\022\024\n\014mouth_pu"
  "cker\030& \001(\002\022\023\n\013mouth_right\030\' \001(\002\022\030\n\020mouth"
  "_roll_lower\030( \001(\002\022\030\n\020mouth_roll_upper\030) "
  "\001(\002\022\031\n\021mouth_shrug_lower\030* \001(\002\022\031\n\021mouth_"
  "shrug_upper\030+ \001(\002\022\030\n\020mouth_smile_left\030, "
  "\001(\002\022\031\n\021mouth_smile_right\030- \001(\002\022\032\n\022mouth_"
  "stretch_left\030. \001(\002\022\033\n\023mouth_stretch_righ"
  "t\030/ \001(\002\022\033\n\023mouth_upper_up_left\0300 \001(\002\022\034\n\024"
  "mouth_upper_up_right\0301 \001(\002\022\027\n\017nose_sneer"
  "_left\0302 \001(\002\022\030\n\020nose_sneer_right\0303 \001(\002\022\022\n"
  "\ntongue_out\0304 \001(\002b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_arkit_5fblend_5fshapes_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_arkit_5fblend_5fshapes_2eproto_sccs[2] = {
  &scc_info_ARKitBlendShapes_arkit_5fblend_5fshapes_2eproto.base,
  &scc_info_ARKitBlendShapesData_arkit_5fblend_5fshapes_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_arkit_5fblend_5fshapes_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_arkit_5fblend_5fshapes_2eproto = {
  false, false, descriptor_table_protodef_arkit_5fblend_5fshapes_2eproto, "arkit_blend_shapes.proto", 1465,
  &descriptor_table_arkit_5fblend_5fshapes_2eproto_once, descriptor_table_arkit_5fblend_5fshapes_2eproto_sccs, descriptor_table_arkit_5fblend_5fshapes_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_arkit_5fblend_5fshapes_2eproto::offsets,
  file_level_metadata_arkit_5fblend_5fshapes_2eproto, 2, file_level_enum_descriptors_arkit_5fblend_5fshapes_2eproto, file_level_service_descriptors_arkit_5fblend_5fshapes_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_arkit_5fblend_5fshapes_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_arkit_5fblend_5fshapes_2eproto)), true);
namespace service {

// ===================================================================

class ARKitBlendShapesData::_Internal {
 public:
  static const ::service::ARKitBlendShapes& ar_kit_blend_shapes(const ARKitBlendShapesData* msg);
};

const ::service::ARKitBlendShapes&
ARKitBlendShapesData::_Internal::ar_kit_blend_shapes(const ARKitBlendShapesData* msg) {
  return *msg->ar_kit_blend_shapes_;
}
ARKitBlendShapesData::ARKitBlendShapesData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:service.ARKitBlendShapesData)
}
ARKitBlendShapesData::ARKitBlendShapesData(const ARKitBlendShapesData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_ar_kit_blend_shapes()) {
    ar_kit_blend_shapes_ = new ::service::ARKitBlendShapes(*from.ar_kit_blend_shapes_);
  } else {
    ar_kit_blend_shapes_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:service.ARKitBlendShapesData)
}

void ARKitBlendShapesData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ARKitBlendShapesData_arkit_5fblend_5fshapes_2eproto.base);
  ar_kit_blend_shapes_ = nullptr;
}

ARKitBlendShapesData::~ARKitBlendShapesData() {
  // @@protoc_insertion_point(destructor:service.ARKitBlendShapesData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ARKitBlendShapesData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete ar_kit_blend_shapes_;
}

void ARKitBlendShapesData::ArenaDtor(void* object) {
  ARKitBlendShapesData* _this = reinterpret_cast< ARKitBlendShapesData* >(object);
  (void)_this;
}
void ARKitBlendShapesData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ARKitBlendShapesData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ARKitBlendShapesData& ARKitBlendShapesData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ARKitBlendShapesData_arkit_5fblend_5fshapes_2eproto.base);
  return *internal_default_instance();
}


void ARKitBlendShapesData::Clear() {
// @@protoc_insertion_point(message_clear_start:service.ARKitBlendShapesData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && ar_kit_blend_shapes_ != nullptr) {
    delete ar_kit_blend_shapes_;
  }
  ar_kit_blend_shapes_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ARKitBlendShapesData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .service.ARKitBlendShapes ar_kit_blend_shapes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ar_kit_blend_shapes(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ARKitBlendShapesData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service.ARKitBlendShapesData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .service.ARKitBlendShapes ar_kit_blend_shapes = 1;
  if (this->has_ar_kit_blend_shapes()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::ar_kit_blend_shapes(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service.ARKitBlendShapesData)
  return target;
}

size_t ARKitBlendShapesData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service.ARKitBlendShapesData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .service.ARKitBlendShapes ar_kit_blend_shapes = 1;
  if (this->has_ar_kit_blend_shapes()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ar_kit_blend_shapes_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ARKitBlendShapesData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:service.ARKitBlendShapesData)
  GOOGLE_DCHECK_NE(&from, this);
  const ARKitBlendShapesData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ARKitBlendShapesData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:service.ARKitBlendShapesData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:service.ARKitBlendShapesData)
    MergeFrom(*source);
  }
}

void ARKitBlendShapesData::MergeFrom(const ARKitBlendShapesData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service.ARKitBlendShapesData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_ar_kit_blend_shapes()) {
    _internal_mutable_ar_kit_blend_shapes()->::service::ARKitBlendShapes::MergeFrom(from._internal_ar_kit_blend_shapes());
  }
}

void ARKitBlendShapesData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:service.ARKitBlendShapesData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ARKitBlendShapesData::CopyFrom(const ARKitBlendShapesData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service.ARKitBlendShapesData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ARKitBlendShapesData::IsInitialized() const {
  return true;
}

void ARKitBlendShapesData::InternalSwap(ARKitBlendShapesData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(ar_kit_blend_shapes_, other->ar_kit_blend_shapes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ARKitBlendShapesData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ARKitBlendShapes::_Internal {
 public:
};

ARKitBlendShapes::ARKitBlendShapes(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:service.ARKitBlendShapes)
}
ARKitBlendShapes::ARKitBlendShapes(const ARKitBlendShapes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&brow_down_left_, &from.brow_down_left_,
    static_cast<size_t>(reinterpret_cast<char*>(&tongue_out_) -
    reinterpret_cast<char*>(&brow_down_left_)) + sizeof(tongue_out_));
  // @@protoc_insertion_point(copy_constructor:service.ARKitBlendShapes)
}

void ARKitBlendShapes::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&brow_down_left_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&tongue_out_) -
      reinterpret_cast<char*>(&brow_down_left_)) + sizeof(tongue_out_));
}

ARKitBlendShapes::~ARKitBlendShapes() {
  // @@protoc_insertion_point(destructor:service.ARKitBlendShapes)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ARKitBlendShapes::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ARKitBlendShapes::ArenaDtor(void* object) {
  ARKitBlendShapes* _this = reinterpret_cast< ARKitBlendShapes* >(object);
  (void)_this;
}
void ARKitBlendShapes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ARKitBlendShapes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ARKitBlendShapes& ARKitBlendShapes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ARKitBlendShapes_arkit_5fblend_5fshapes_2eproto.base);
  return *internal_default_instance();
}


void ARKitBlendShapes::Clear() {
// @@protoc_insertion_point(message_clear_start:service.ARKitBlendShapes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&brow_down_left_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tongue_out_) -
      reinterpret_cast<char*>(&brow_down_left_)) + sizeof(tongue_out_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ARKitBlendShapes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float brow_down_left = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          brow_down_left_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float brow_down_right = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          brow_down_right_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float brow_inner_up = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          brow_inner_up_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float brow_outer_up_left = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          brow_outer_up_left_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float brow_outer_up_right = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          brow_outer_up_right_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float cheek_puff = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          cheek_puff_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float cheek_squint_left = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          cheek_squint_left_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float cheek_squint_right = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          cheek_squint_right_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float eye_blink_left = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          eye_blink_left_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float eye_blink_right = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          eye_blink_right_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float eye_look_down_left = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          eye_look_down_left_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float eye_look_down_right = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          eye_look_down_right_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float eye_look_in_left = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          eye_look_in_left_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float eye_look_in_right = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          eye_look_in_right_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float eye_look_out_left = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 125)) {
          eye_look_out_left_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float eye_look_out_right = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 133)) {
          eye_look_out_right_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float eye_look_up_left = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 141)) {
          eye_look_up_left_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float eye_look_up_right = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 149)) {
          eye_look_up_right_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float eye_squint_left = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 157)) {
          eye_squint_left_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float eye_squint_right = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 165)) {
          eye_squint_right_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float eye_wide_left = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 173)) {
          eye_wide_left_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float eye_wide_right = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 181)) {
          eye_wide_right_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float jaw_forward = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 189)) {
          jaw_forward_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float jaw_left = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 197)) {
          jaw_left_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float jaw_open = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 205)) {
          jaw_open_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float jaw_right = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 213)) {
          jaw_right_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float mouth_close = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 221)) {
          mouth_close_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float mouth_dimple_left = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 229)) {
          mouth_dimple_left_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float mouth_dimple_right = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 237)) {
          mouth_dimple_right_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float mouth_frown_left = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 245)) {
          mouth_frown_left_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float mouth_frown_right = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 253)) {
          mouth_frown_right_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float mouth_funnel = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 5)) {
          mouth_funnel_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float mouth_left = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          mouth_left_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float mouth_lower_down_left = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          mouth_lower_down_left_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float mouth_lower_down_right = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          mouth_lower_down_right_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float mouth_press_left = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          mouth_press_left_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float mouth_press_right = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          mouth_press_right_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float mouth_pucker = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          mouth_pucker_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float mouth_right = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          mouth_right_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float mouth_roll_lower = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          mouth_roll_lower_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float mouth_roll_upper = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          mouth_roll_upper_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float mouth_shrug_lower = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          mouth_shrug_lower_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float mouth_shrug_upper = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          mouth_shrug_upper_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float mouth_smile_left = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          mouth_smile_left_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float mouth_smile_right = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          mouth_smile_right_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float mouth_stretch_left = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          mouth_stretch_left_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float mouth_stretch_right = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 125)) {
          mouth_stretch_right_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float mouth_upper_up_left = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 133)) {
          mouth_upper_up_left_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float mouth_upper_up_right = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 141)) {
          mouth_upper_up_right_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float nose_sneer_left = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 149)) {
          nose_sneer_left_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float nose_sneer_right = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 157)) {
          nose_sneer_right_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float tongue_out = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 165)) {
          tongue_out_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ARKitBlendShapes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service.ARKitBlendShapes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float brow_down_left = 1;
  if (!(this->brow_down_left() <= 0 && this->brow_down_left() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_brow_down_left(), target);
  }

  // float brow_down_right = 2;
  if (!(this->brow_down_right() <= 0 && this->brow_down_right() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_brow_down_right(), target);
  }

  // float brow_inner_up = 3;
  if (!(this->brow_inner_up() <= 0 && this->brow_inner_up() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_brow_inner_up(), target);
  }

  // float brow_outer_up_left = 4;
  if (!(this->brow_outer_up_left() <= 0 && this->brow_outer_up_left() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_brow_outer_up_left(), target);
  }

  // float brow_outer_up_right = 5;
  if (!(this->brow_outer_up_right() <= 0 && this->brow_outer_up_right() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_brow_outer_up_right(), target);
  }

  // float cheek_puff = 6;
  if (!(this->cheek_puff() <= 0 && this->cheek_puff() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_cheek_puff(), target);
  }

  // float cheek_squint_left = 7;
  if (!(this->cheek_squint_left() <= 0 && this->cheek_squint_left() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_cheek_squint_left(), target);
  }

  // float cheek_squint_right = 8;
  if (!(this->cheek_squint_right() <= 0 && this->cheek_squint_right() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_cheek_squint_right(), target);
  }

  // float eye_blink_left = 9;
  if (!(this->eye_blink_left() <= 0 && this->eye_blink_left() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_eye_blink_left(), target);
  }

  // float eye_blink_right = 10;
  if (!(this->eye_blink_right() <= 0 && this->eye_blink_right() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_eye_blink_right(), target);
  }

  // float eye_look_down_left = 11;
  if (!(this->eye_look_down_left() <= 0 && this->eye_look_down_left() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_eye_look_down_left(), target);
  }

  // float eye_look_down_right = 12;
  if (!(this->eye_look_down_right() <= 0 && this->eye_look_down_right() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->_internal_eye_look_down_right(), target);
  }

  // float eye_look_in_left = 13;
  if (!(this->eye_look_in_left() <= 0 && this->eye_look_in_left() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(13, this->_internal_eye_look_in_left(), target);
  }

  // float eye_look_in_right = 14;
  if (!(this->eye_look_in_right() <= 0 && this->eye_look_in_right() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(14, this->_internal_eye_look_in_right(), target);
  }

  // float eye_look_out_left = 15;
  if (!(this->eye_look_out_left() <= 0 && this->eye_look_out_left() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(15, this->_internal_eye_look_out_left(), target);
  }

  // float eye_look_out_right = 16;
  if (!(this->eye_look_out_right() <= 0 && this->eye_look_out_right() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(16, this->_internal_eye_look_out_right(), target);
  }

  // float eye_look_up_left = 17;
  if (!(this->eye_look_up_left() <= 0 && this->eye_look_up_left() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(17, this->_internal_eye_look_up_left(), target);
  }

  // float eye_look_up_right = 18;
  if (!(this->eye_look_up_right() <= 0 && this->eye_look_up_right() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(18, this->_internal_eye_look_up_right(), target);
  }

  // float eye_squint_left = 19;
  if (!(this->eye_squint_left() <= 0 && this->eye_squint_left() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(19, this->_internal_eye_squint_left(), target);
  }

  // float eye_squint_right = 20;
  if (!(this->eye_squint_right() <= 0 && this->eye_squint_right() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(20, this->_internal_eye_squint_right(), target);
  }

  // float eye_wide_left = 21;
  if (!(this->eye_wide_left() <= 0 && this->eye_wide_left() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(21, this->_internal_eye_wide_left(), target);
  }

  // float eye_wide_right = 22;
  if (!(this->eye_wide_right() <= 0 && this->eye_wide_right() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(22, this->_internal_eye_wide_right(), target);
  }

  // float jaw_forward = 23;
  if (!(this->jaw_forward() <= 0 && this->jaw_forward() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(23, this->_internal_jaw_forward(), target);
  }

  // float jaw_left = 24;
  if (!(this->jaw_left() <= 0 && this->jaw_left() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(24, this->_internal_jaw_left(), target);
  }

  // float jaw_open = 25;
  if (!(this->jaw_open() <= 0 && this->jaw_open() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(25, this->_internal_jaw_open(), target);
  }

  // float jaw_right = 26;
  if (!(this->jaw_right() <= 0 && this->jaw_right() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(26, this->_internal_jaw_right(), target);
  }

  // float mouth_close = 27;
  if (!(this->mouth_close() <= 0 && this->mouth_close() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(27, this->_internal_mouth_close(), target);
  }

  // float mouth_dimple_left = 28;
  if (!(this->mouth_dimple_left() <= 0 && this->mouth_dimple_left() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(28, this->_internal_mouth_dimple_left(), target);
  }

  // float mouth_dimple_right = 29;
  if (!(this->mouth_dimple_right() <= 0 && this->mouth_dimple_right() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(29, this->_internal_mouth_dimple_right(), target);
  }

  // float mouth_frown_left = 30;
  if (!(this->mouth_frown_left() <= 0 && this->mouth_frown_left() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(30, this->_internal_mouth_frown_left(), target);
  }

  // float mouth_frown_right = 31;
  if (!(this->mouth_frown_right() <= 0 && this->mouth_frown_right() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(31, this->_internal_mouth_frown_right(), target);
  }

  // float mouth_funnel = 32;
  if (!(this->mouth_funnel() <= 0 && this->mouth_funnel() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(32, this->_internal_mouth_funnel(), target);
  }

  // float mouth_left = 33;
  if (!(this->mouth_left() <= 0 && this->mouth_left() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(33, this->_internal_mouth_left(), target);
  }

  // float mouth_lower_down_left = 34;
  if (!(this->mouth_lower_down_left() <= 0 && this->mouth_lower_down_left() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(34, this->_internal_mouth_lower_down_left(), target);
  }

  // float mouth_lower_down_right = 35;
  if (!(this->mouth_lower_down_right() <= 0 && this->mouth_lower_down_right() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(35, this->_internal_mouth_lower_down_right(), target);
  }

  // float mouth_press_left = 36;
  if (!(this->mouth_press_left() <= 0 && this->mouth_press_left() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(36, this->_internal_mouth_press_left(), target);
  }

  // float mouth_press_right = 37;
  if (!(this->mouth_press_right() <= 0 && this->mouth_press_right() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(37, this->_internal_mouth_press_right(), target);
  }

  // float mouth_pucker = 38;
  if (!(this->mouth_pucker() <= 0 && this->mouth_pucker() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(38, this->_internal_mouth_pucker(), target);
  }

  // float mouth_right = 39;
  if (!(this->mouth_right() <= 0 && this->mouth_right() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(39, this->_internal_mouth_right(), target);
  }

  // float mouth_roll_lower = 40;
  if (!(this->mouth_roll_lower() <= 0 && this->mouth_roll_lower() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(40, this->_internal_mouth_roll_lower(), target);
  }

  // float mouth_roll_upper = 41;
  if (!(this->mouth_roll_upper() <= 0 && this->mouth_roll_upper() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(41, this->_internal_mouth_roll_upper(), target);
  }

  // float mouth_shrug_lower = 42;
  if (!(this->mouth_shrug_lower() <= 0 && this->mouth_shrug_lower() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(42, this->_internal_mouth_shrug_lower(), target);
  }

  // float mouth_shrug_upper = 43;
  if (!(this->mouth_shrug_upper() <= 0 && this->mouth_shrug_upper() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(43, this->_internal_mouth_shrug_upper(), target);
  }

  // float mouth_smile_left = 44;
  if (!(this->mouth_smile_left() <= 0 && this->mouth_smile_left() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(44, this->_internal_mouth_smile_left(), target);
  }

  // float mouth_smile_right = 45;
  if (!(this->mouth_smile_right() <= 0 && this->mouth_smile_right() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(45, this->_internal_mouth_smile_right(), target);
  }

  // float mouth_stretch_left = 46;
  if (!(this->mouth_stretch_left() <= 0 && this->mouth_stretch_left() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(46, this->_internal_mouth_stretch_left(), target);
  }

  // float mouth_stretch_right = 47;
  if (!(this->mouth_stretch_right() <= 0 && this->mouth_stretch_right() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(47, this->_internal_mouth_stretch_right(), target);
  }

  // float mouth_upper_up_left = 48;
  if (!(this->mouth_upper_up_left() <= 0 && this->mouth_upper_up_left() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(48, this->_internal_mouth_upper_up_left(), target);
  }

  // float mouth_upper_up_right = 49;
  if (!(this->mouth_upper_up_right() <= 0 && this->mouth_upper_up_right() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(49, this->_internal_mouth_upper_up_right(), target);
  }

  // float nose_sneer_left = 50;
  if (!(this->nose_sneer_left() <= 0 && this->nose_sneer_left() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(50, this->_internal_nose_sneer_left(), target);
  }

  // float nose_sneer_right = 51;
  if (!(this->nose_sneer_right() <= 0 && this->nose_sneer_right() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(51, this->_internal_nose_sneer_right(), target);
  }

  // float tongue_out = 52;
  if (!(this->tongue_out() <= 0 && this->tongue_out() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(52, this->_internal_tongue_out(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service.ARKitBlendShapes)
  return target;
}

size_t ARKitBlendShapes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service.ARKitBlendShapes)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float brow_down_left = 1;
  if (!(this->brow_down_left() <= 0 && this->brow_down_left() >= 0)) {
    total_size += 1 + 4;
  }

  // float brow_down_right = 2;
  if (!(this->brow_down_right() <= 0 && this->brow_down_right() >= 0)) {
    total_size += 1 + 4;
  }

  // float brow_inner_up = 3;
  if (!(this->brow_inner_up() <= 0 && this->brow_inner_up() >= 0)) {
    total_size += 1 + 4;
  }

  // float brow_outer_up_left = 4;
  if (!(this->brow_outer_up_left() <= 0 && this->brow_outer_up_left() >= 0)) {
    total_size += 1 + 4;
  }

  // float brow_outer_up_right = 5;
  if (!(this->brow_outer_up_right() <= 0 && this->brow_outer_up_right() >= 0)) {
    total_size += 1 + 4;
  }

  // float cheek_puff = 6;
  if (!(this->cheek_puff() <= 0 && this->cheek_puff() >= 0)) {
    total_size += 1 + 4;
  }

  // float cheek_squint_left = 7;
  if (!(this->cheek_squint_left() <= 0 && this->cheek_squint_left() >= 0)) {
    total_size += 1 + 4;
  }

  // float cheek_squint_right = 8;
  if (!(this->cheek_squint_right() <= 0 && this->cheek_squint_right() >= 0)) {
    total_size += 1 + 4;
  }

  // float eye_blink_left = 9;
  if (!(this->eye_blink_left() <= 0 && this->eye_blink_left() >= 0)) {
    total_size += 1 + 4;
  }

  // float eye_blink_right = 10;
  if (!(this->eye_blink_right() <= 0 && this->eye_blink_right() >= 0)) {
    total_size += 1 + 4;
  }

  // float eye_look_down_left = 11;
  if (!(this->eye_look_down_left() <= 0 && this->eye_look_down_left() >= 0)) {
    total_size += 1 + 4;
  }

  // float eye_look_down_right = 12;
  if (!(this->eye_look_down_right() <= 0 && this->eye_look_down_right() >= 0)) {
    total_size += 1 + 4;
  }

  // float eye_look_in_left = 13;
  if (!(this->eye_look_in_left() <= 0 && this->eye_look_in_left() >= 0)) {
    total_size += 1 + 4;
  }

  // float eye_look_in_right = 14;
  if (!(this->eye_look_in_right() <= 0 && this->eye_look_in_right() >= 0)) {
    total_size += 1 + 4;
  }

  // float eye_look_out_left = 15;
  if (!(this->eye_look_out_left() <= 0 && this->eye_look_out_left() >= 0)) {
    total_size += 1 + 4;
  }

  // float eye_look_out_right = 16;
  if (!(this->eye_look_out_right() <= 0 && this->eye_look_out_right() >= 0)) {
    total_size += 2 + 4;
  }

  // float eye_look_up_left = 17;
  if (!(this->eye_look_up_left() <= 0 && this->eye_look_up_left() >= 0)) {
    total_size += 2 + 4;
  }

  // float eye_look_up_right = 18;
  if (!(this->eye_look_up_right() <= 0 && this->eye_look_up_right() >= 0)) {
    total_size += 2 + 4;
  }

  // float eye_squint_left = 19;
  if (!(this->eye_squint_left() <= 0 && this->eye_squint_left() >= 0)) {
    total_size += 2 + 4;
  }

  // float eye_squint_right = 20;
  if (!(this->eye_squint_right() <= 0 && this->eye_squint_right() >= 0)) {
    total_size += 2 + 4;
  }

  // float eye_wide_left = 21;
  if (!(this->eye_wide_left() <= 0 && this->eye_wide_left() >= 0)) {
    total_size += 2 + 4;
  }

  // float eye_wide_right = 22;
  if (!(this->eye_wide_right() <= 0 && this->eye_wide_right() >= 0)) {
    total_size += 2 + 4;
  }

  // float jaw_forward = 23;
  if (!(this->jaw_forward() <= 0 && this->jaw_forward() >= 0)) {
    total_size += 2 + 4;
  }

  // float jaw_left = 24;
  if (!(this->jaw_left() <= 0 && this->jaw_left() >= 0)) {
    total_size += 2 + 4;
  }

  // float jaw_open = 25;
  if (!(this->jaw_open() <= 0 && this->jaw_open() >= 0)) {
    total_size += 2 + 4;
  }

  // float jaw_right = 26;
  if (!(this->jaw_right() <= 0 && this->jaw_right() >= 0)) {
    total_size += 2 + 4;
  }

  // float mouth_close = 27;
  if (!(this->mouth_close() <= 0 && this->mouth_close() >= 0)) {
    total_size += 2 + 4;
  }

  // float mouth_dimple_left = 28;
  if (!(this->mouth_dimple_left() <= 0 && this->mouth_dimple_left() >= 0)) {
    total_size += 2 + 4;
  }

  // float mouth_dimple_right = 29;
  if (!(this->mouth_dimple_right() <= 0 && this->mouth_dimple_right() >= 0)) {
    total_size += 2 + 4;
  }

  // float mouth_frown_left = 30;
  if (!(this->mouth_frown_left() <= 0 && this->mouth_frown_left() >= 0)) {
    total_size += 2 + 4;
  }

  // float mouth_frown_right = 31;
  if (!(this->mouth_frown_right() <= 0 && this->mouth_frown_right() >= 0)) {
    total_size += 2 + 4;
  }

  // float mouth_funnel = 32;
  if (!(this->mouth_funnel() <= 0 && this->mouth_funnel() >= 0)) {
    total_size += 2 + 4;
  }

  // float mouth_left = 33;
  if (!(this->mouth_left() <= 0 && this->mouth_left() >= 0)) {
    total_size += 2 + 4;
  }

  // float mouth_lower_down_left = 34;
  if (!(this->mouth_lower_down_left() <= 0 && this->mouth_lower_down_left() >= 0)) {
    total_size += 2 + 4;
  }

  // float mouth_lower_down_right = 35;
  if (!(this->mouth_lower_down_right() <= 0 && this->mouth_lower_down_right() >= 0)) {
    total_size += 2 + 4;
  }

  // float mouth_press_left = 36;
  if (!(this->mouth_press_left() <= 0 && this->mouth_press_left() >= 0)) {
    total_size += 2 + 4;
  }

  // float mouth_press_right = 37;
  if (!(this->mouth_press_right() <= 0 && this->mouth_press_right() >= 0)) {
    total_size += 2 + 4;
  }

  // float mouth_pucker = 38;
  if (!(this->mouth_pucker() <= 0 && this->mouth_pucker() >= 0)) {
    total_size += 2 + 4;
  }

  // float mouth_right = 39;
  if (!(this->mouth_right() <= 0 && this->mouth_right() >= 0)) {
    total_size += 2 + 4;
  }

  // float mouth_roll_lower = 40;
  if (!(this->mouth_roll_lower() <= 0 && this->mouth_roll_lower() >= 0)) {
    total_size += 2 + 4;
  }

  // float mouth_roll_upper = 41;
  if (!(this->mouth_roll_upper() <= 0 && this->mouth_roll_upper() >= 0)) {
    total_size += 2 + 4;
  }

  // float mouth_shrug_lower = 42;
  if (!(this->mouth_shrug_lower() <= 0 && this->mouth_shrug_lower() >= 0)) {
    total_size += 2 + 4;
  }

  // float mouth_shrug_upper = 43;
  if (!(this->mouth_shrug_upper() <= 0 && this->mouth_shrug_upper() >= 0)) {
    total_size += 2 + 4;
  }

  // float mouth_smile_left = 44;
  if (!(this->mouth_smile_left() <= 0 && this->mouth_smile_left() >= 0)) {
    total_size += 2 + 4;
  }

  // float mouth_smile_right = 45;
  if (!(this->mouth_smile_right() <= 0 && this->mouth_smile_right() >= 0)) {
    total_size += 2 + 4;
  }

  // float mouth_stretch_left = 46;
  if (!(this->mouth_stretch_left() <= 0 && this->mouth_stretch_left() >= 0)) {
    total_size += 2 + 4;
  }

  // float mouth_stretch_right = 47;
  if (!(this->mouth_stretch_right() <= 0 && this->mouth_stretch_right() >= 0)) {
    total_size += 2 + 4;
  }

  // float mouth_upper_up_left = 48;
  if (!(this->mouth_upper_up_left() <= 0 && this->mouth_upper_up_left() >= 0)) {
    total_size += 2 + 4;
  }

  // float mouth_upper_up_right = 49;
  if (!(this->mouth_upper_up_right() <= 0 && this->mouth_upper_up_right() >= 0)) {
    total_size += 2 + 4;
  }

  // float nose_sneer_left = 50;
  if (!(this->nose_sneer_left() <= 0 && this->nose_sneer_left() >= 0)) {
    total_size += 2 + 4;
  }

  // float nose_sneer_right = 51;
  if (!(this->nose_sneer_right() <= 0 && this->nose_sneer_right() >= 0)) {
    total_size += 2 + 4;
  }

  // float tongue_out = 52;
  if (!(this->tongue_out() <= 0 && this->tongue_out() >= 0)) {
    total_size += 2 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ARKitBlendShapes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:service.ARKitBlendShapes)
  GOOGLE_DCHECK_NE(&from, this);
  const ARKitBlendShapes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ARKitBlendShapes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:service.ARKitBlendShapes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:service.ARKitBlendShapes)
    MergeFrom(*source);
  }
}

void ARKitBlendShapes::MergeFrom(const ARKitBlendShapes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service.ARKitBlendShapes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.brow_down_left() <= 0 && from.brow_down_left() >= 0)) {
    _internal_set_brow_down_left(from._internal_brow_down_left());
  }
  if (!(from.brow_down_right() <= 0 && from.brow_down_right() >= 0)) {
    _internal_set_brow_down_right(from._internal_brow_down_right());
  }
  if (!(from.brow_inner_up() <= 0 && from.brow_inner_up() >= 0)) {
    _internal_set_brow_inner_up(from._internal_brow_inner_up());
  }
  if (!(from.brow_outer_up_left() <= 0 && from.brow_outer_up_left() >= 0)) {
    _internal_set_brow_outer_up_left(from._internal_brow_outer_up_left());
  }
  if (!(from.brow_outer_up_right() <= 0 && from.brow_outer_up_right() >= 0)) {
    _internal_set_brow_outer_up_right(from._internal_brow_outer_up_right());
  }
  if (!(from.cheek_puff() <= 0 && from.cheek_puff() >= 0)) {
    _internal_set_cheek_puff(from._internal_cheek_puff());
  }
  if (!(from.cheek_squint_left() <= 0 && from.cheek_squint_left() >= 0)) {
    _internal_set_cheek_squint_left(from._internal_cheek_squint_left());
  }
  if (!(from.cheek_squint_right() <= 0 && from.cheek_squint_right() >= 0)) {
    _internal_set_cheek_squint_right(from._internal_cheek_squint_right());
  }
  if (!(from.eye_blink_left() <= 0 && from.eye_blink_left() >= 0)) {
    _internal_set_eye_blink_left(from._internal_eye_blink_left());
  }
  if (!(from.eye_blink_right() <= 0 && from.eye_blink_right() >= 0)) {
    _internal_set_eye_blink_right(from._internal_eye_blink_right());
  }
  if (!(from.eye_look_down_left() <= 0 && from.eye_look_down_left() >= 0)) {
    _internal_set_eye_look_down_left(from._internal_eye_look_down_left());
  }
  if (!(from.eye_look_down_right() <= 0 && from.eye_look_down_right() >= 0)) {
    _internal_set_eye_look_down_right(from._internal_eye_look_down_right());
  }
  if (!(from.eye_look_in_left() <= 0 && from.eye_look_in_left() >= 0)) {
    _internal_set_eye_look_in_left(from._internal_eye_look_in_left());
  }
  if (!(from.eye_look_in_right() <= 0 && from.eye_look_in_right() >= 0)) {
    _internal_set_eye_look_in_right(from._internal_eye_look_in_right());
  }
  if (!(from.eye_look_out_left() <= 0 && from.eye_look_out_left() >= 0)) {
    _internal_set_eye_look_out_left(from._internal_eye_look_out_left());
  }
  if (!(from.eye_look_out_right() <= 0 && from.eye_look_out_right() >= 0)) {
    _internal_set_eye_look_out_right(from._internal_eye_look_out_right());
  }
  if (!(from.eye_look_up_left() <= 0 && from.eye_look_up_left() >= 0)) {
    _internal_set_eye_look_up_left(from._internal_eye_look_up_left());
  }
  if (!(from.eye_look_up_right() <= 0 && from.eye_look_up_right() >= 0)) {
    _internal_set_eye_look_up_right(from._internal_eye_look_up_right());
  }
  if (!(from.eye_squint_left() <= 0 && from.eye_squint_left() >= 0)) {
    _internal_set_eye_squint_left(from._internal_eye_squint_left());
  }
  if (!(from.eye_squint_right() <= 0 && from.eye_squint_right() >= 0)) {
    _internal_set_eye_squint_right(from._internal_eye_squint_right());
  }
  if (!(from.eye_wide_left() <= 0 && from.eye_wide_left() >= 0)) {
    _internal_set_eye_wide_left(from._internal_eye_wide_left());
  }
  if (!(from.eye_wide_right() <= 0 && from.eye_wide_right() >= 0)) {
    _internal_set_eye_wide_right(from._internal_eye_wide_right());
  }
  if (!(from.jaw_forward() <= 0 && from.jaw_forward() >= 0)) {
    _internal_set_jaw_forward(from._internal_jaw_forward());
  }
  if (!(from.jaw_left() <= 0 && from.jaw_left() >= 0)) {
    _internal_set_jaw_left(from._internal_jaw_left());
  }
  if (!(from.jaw_open() <= 0 && from.jaw_open() >= 0)) {
    _internal_set_jaw_open(from._internal_jaw_open());
  }
  if (!(from.jaw_right() <= 0 && from.jaw_right() >= 0)) {
    _internal_set_jaw_right(from._internal_jaw_right());
  }
  if (!(from.mouth_close() <= 0 && from.mouth_close() >= 0)) {
    _internal_set_mouth_close(from._internal_mouth_close());
  }
  if (!(from.mouth_dimple_left() <= 0 && from.mouth_dimple_left() >= 0)) {
    _internal_set_mouth_dimple_left(from._internal_mouth_dimple_left());
  }
  if (!(from.mouth_dimple_right() <= 0 && from.mouth_dimple_right() >= 0)) {
    _internal_set_mouth_dimple_right(from._internal_mouth_dimple_right());
  }
  if (!(from.mouth_frown_left() <= 0 && from.mouth_frown_left() >= 0)) {
    _internal_set_mouth_frown_left(from._internal_mouth_frown_left());
  }
  if (!(from.mouth_frown_right() <= 0 && from.mouth_frown_right() >= 0)) {
    _internal_set_mouth_frown_right(from._internal_mouth_frown_right());
  }
  if (!(from.mouth_funnel() <= 0 && from.mouth_funnel() >= 0)) {
    _internal_set_mouth_funnel(from._internal_mouth_funnel());
  }
  if (!(from.mouth_left() <= 0 && from.mouth_left() >= 0)) {
    _internal_set_mouth_left(from._internal_mouth_left());
  }
  if (!(from.mouth_lower_down_left() <= 0 && from.mouth_lower_down_left() >= 0)) {
    _internal_set_mouth_lower_down_left(from._internal_mouth_lower_down_left());
  }
  if (!(from.mouth_lower_down_right() <= 0 && from.mouth_lower_down_right() >= 0)) {
    _internal_set_mouth_lower_down_right(from._internal_mouth_lower_down_right());
  }
  if (!(from.mouth_press_left() <= 0 && from.mouth_press_left() >= 0)) {
    _internal_set_mouth_press_left(from._internal_mouth_press_left());
  }
  if (!(from.mouth_press_right() <= 0 && from.mouth_press_right() >= 0)) {
    _internal_set_mouth_press_right(from._internal_mouth_press_right());
  }
  if (!(from.mouth_pucker() <= 0 && from.mouth_pucker() >= 0)) {
    _internal_set_mouth_pucker(from._internal_mouth_pucker());
  }
  if (!(from.mouth_right() <= 0 && from.mouth_right() >= 0)) {
    _internal_set_mouth_right(from._internal_mouth_right());
  }
  if (!(from.mouth_roll_lower() <= 0 && from.mouth_roll_lower() >= 0)) {
    _internal_set_mouth_roll_lower(from._internal_mouth_roll_lower());
  }
  if (!(from.mouth_roll_upper() <= 0 && from.mouth_roll_upper() >= 0)) {
    _internal_set_mouth_roll_upper(from._internal_mouth_roll_upper());
  }
  if (!(from.mouth_shrug_lower() <= 0 && from.mouth_shrug_lower() >= 0)) {
    _internal_set_mouth_shrug_lower(from._internal_mouth_shrug_lower());
  }
  if (!(from.mouth_shrug_upper() <= 0 && from.mouth_shrug_upper() >= 0)) {
    _internal_set_mouth_shrug_upper(from._internal_mouth_shrug_upper());
  }
  if (!(from.mouth_smile_left() <= 0 && from.mouth_smile_left() >= 0)) {
    _internal_set_mouth_smile_left(from._internal_mouth_smile_left());
  }
  if (!(from.mouth_smile_right() <= 0 && from.mouth_smile_right() >= 0)) {
    _internal_set_mouth_smile_right(from._internal_mouth_smile_right());
  }
  if (!(from.mouth_stretch_left() <= 0 && from.mouth_stretch_left() >= 0)) {
    _internal_set_mouth_stretch_left(from._internal_mouth_stretch_left());
  }
  if (!(from.mouth_stretch_right() <= 0 && from.mouth_stretch_right() >= 0)) {
    _internal_set_mouth_stretch_right(from._internal_mouth_stretch_right());
  }
  if (!(from.mouth_upper_up_left() <= 0 && from.mouth_upper_up_left() >= 0)) {
    _internal_set_mouth_upper_up_left(from._internal_mouth_upper_up_left());
  }
  if (!(from.mouth_upper_up_right() <= 0 && from.mouth_upper_up_right() >= 0)) {
    _internal_set_mouth_upper_up_right(from._internal_mouth_upper_up_right());
  }
  if (!(from.nose_sneer_left() <= 0 && from.nose_sneer_left() >= 0)) {
    _internal_set_nose_sneer_left(from._internal_nose_sneer_left());
  }
  if (!(from.nose_sneer_right() <= 0 && from.nose_sneer_right() >= 0)) {
    _internal_set_nose_sneer_right(from._internal_nose_sneer_right());
  }
  if (!(from.tongue_out() <= 0 && from.tongue_out() >= 0)) {
    _internal_set_tongue_out(from._internal_tongue_out());
  }
}

void ARKitBlendShapes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:service.ARKitBlendShapes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ARKitBlendShapes::CopyFrom(const ARKitBlendShapes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service.ARKitBlendShapes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ARKitBlendShapes::IsInitialized() const {
  return true;
}

void ARKitBlendShapes::InternalSwap(ARKitBlendShapes* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ARKitBlendShapes, tongue_out_)
      + sizeof(ARKitBlendShapes::tongue_out_)
      - PROTOBUF_FIELD_OFFSET(ARKitBlendShapes, brow_down_left_)>(
          reinterpret_cast<char*>(&brow_down_left_),
          reinterpret_cast<char*>(&other->brow_down_left_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ARKitBlendShapes::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace service
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::service::ARKitBlendShapesData* Arena::CreateMaybeMessage< ::service::ARKitBlendShapesData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service::ARKitBlendShapesData >(arena);
}
template<> PROTOBUF_NOINLINE ::service::ARKitBlendShapes* Arena::CreateMaybeMessage< ::service::ARKitBlendShapes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service::ARKitBlendShapes >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
#else
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: arkit_blend_shapes.proto

#include "arkit_blend_shapes.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace service {
PROTOBUF_CONSTEXPR ARKitBlendShapesData::ARKitBlendShapesData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ar_kit_blend_shapes_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ARKitBlendShapesDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ARKitBlendShapesDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ARKitBlendShapesDataDefaultTypeInternal() {}
  union {
    ARKitBlendShapesData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ARKitBlendShapesDataDefaultTypeInternal _ARKitBlendShapesData_default_instance_;
PROTOBUF_CONSTEXPR ARKitBlendShapes::ARKitBlendShapes(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.brow_down_left_)*/0
  , /*decltype(_impl_.brow_down_right_)*/0
  , /*decltype(_impl_.brow_inner_up_)*/0
  , /*decltype(_impl_.brow_outer_up_left_)*/0
  , /*decltype(_impl_.brow_outer_up_right_)*/0
  , /*decltype(_impl_.cheek_puff_)*/0
  , /*decltype(_impl_.cheek_squint_left_)*/0
  , /*decltype(_impl_.cheek_squint_right_)*/0
  , /*decltype(_impl_.eye_blink_left_)*/0
  , /*decltype(_impl_.eye_blink_right_)*/0
  , /*decltype(_impl_.eye_look_down_left_)*/0
  , /*decltype(_impl_.eye_look_down_right_)*/0
  , /*decltype(_impl_.eye_look_in_left_)*/0
  , /*decltype(_impl_.eye_look_in_right_)*/0
  , /*decltype(_impl_.eye_look_out_left_)*/0
  , /*decltype(_impl_.eye_look_out_right_)*/0
  , /*decltype(_impl_.eye_look_up_left_)*/0
  , /*decltype(_impl_.eye_look_up_right_)*/0
  , /*decltype(_impl_.eye_squint_left_)*/0
  , /*decltype(_impl_.eye_squint_right_)*/0
  , /*decltype(_impl_.eye_wide_left_)*/0
  , /*decltype(_impl_.eye_wide_right_)*/0
  , /*decltype(_impl_.jaw_forward_)*/0
  , /*decltype(_impl_.jaw_left_)*/0
  , /*decltype(_impl_.jaw_open_)*/0
  , /*decltype(_impl_.jaw_right_)*/0
  , /*decltype(_impl_.mouth_close_)*/0
  , /*decltype(_impl_.mouth_dimple_left_)*/0
  , /*decltype(_impl_.mouth_dimple_right_)*/0
  , /*decltype(_impl_.mouth_frown_left_)*/0
  , /*decltype(_impl_.mouth_frown_right_)*/0
  , /*decltype(_impl_.mouth_funnel_)*/0
  , /*decltype(_impl_.mouth_left_)*/0
  , /*decltype(_impl_.mouth_lower_down_left_)*/0
  , /*decltype(_impl_.mouth_lower_down_right_)*/0
  , /*decltype(_impl_.mouth_press_left_)*/0
  , /*decltype(_impl_.mouth_press_right_)*/0
  , /*decltype(_impl_.mouth_pucker_)*/0
  , /*decltype(_impl_.mouth_right_)*/0
  , /*decltype(_impl_.mouth_roll_lower_)*/0
  , /*decltype(_impl_.mouth_roll_upper_)*/0
  , /*decltype(_impl_.mouth_shrug_lower_)*/0
  , /*decltype(_impl_.mouth_shrug_upper_)*/0
  , /*decltype(_impl_.mouth_smile_left_)*/0
  , /*decltype(_impl_.mouth_smile_right_)*/0
  , /*decltype(_impl_.mouth_stretch_left_)*/0
  , /*decltype(_impl_.mouth_stretch_right_)*/0
  , /*decltype(_impl_.mouth_upper_up_left_)*/0
  , /*decltype(_impl_.mouth_upper_up_right_)*/0
  , /*decltype(_impl_.nose_sneer_left_)*/0
  , /*decltype(_impl_.nose_sneer_right_)*/0
  , /*decltype(_impl_.tongue_out_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ARKitBlendShapesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ARKitBlendShapesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ARKitBlendShapesDefaultTypeInternal() {}
  union {
    ARKitBlendShapes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ARKitBlendShapesDefaultTypeInternal _ARKitBlendShapes_default_instance_;
}  // namespace service
static ::_pb::Metadata file_level_metadata_arkit_5fblend_5fshapes_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_arkit_5fblend_5fshapes_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_arkit_5fblend_5fshapes_2eproto = nullptr;

const uint32_t TableStruct_arkit_5fblend_5fshapes_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service::ARKitBlendShapesData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service::ARKitBlendShapesData, _impl_.ar_kit_blend_shapes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service::ARKitBlendShapes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service::ARKitBlendShapes, _impl_.brow_down_left_),
  PROTOBUF_FIELD_OFFSET(::service::ARKitBlendShapes, _impl_.brow_down_right_),
  PROTOBUF_FIELD_OFFSET(::service::ARKitBlendShapes, _impl_.brow_inner_up_),
  PROTOBUF_FIELD_OFFSET(::service::ARKitBlendShapes, _impl_.brow_outer_up_left_),
  PROTOBUF_FIELD_OFFSET(::service::ARKitBlendShapes, _impl_.brow_outer_up_right_),
  PROTOBUF_FIELD_OFFSET(::service::ARKitBlendShapes, _impl_.cheek_puff_),
  PROTOBUF_FIELD_OFFSET(::service::ARKitBlendShapes, _impl_.cheek_squint_left_),
  PROTOBUF_FIELD_OFFSET(::service::ARKitBlendShapes, _impl_.cheek_squint_right_),
  PROTOBUF_FIELD_OFFSET(::service::ARKitBlendShapes, _impl_.eye_blink_left_),
  PROTOBUF_FIELD_OFFSET(::service::ARKitBlendShapes, _impl_.eye_blink_right_),
  PROTOBUF_FIELD_OFFSET(::service::ARKitBlendShapes, _impl_.eye_look_down_left_),
  PROTOBUF_FIELD_OFFSET(::service::ARKitBlendShapes, _impl_.eye_look_down_right_),
  PROTOBUF_FIELD_OFFSET(::service::ARKitBlendShapes, _impl_.eye_look_in_left_),
  PROTOBUF_FIELD_OFFSET(::service::ARKitBlendShapes, _impl_.eye_look_in_right_),
  PROTOBUF_FIELD_OFFSET(::service::ARKitBlendShapes, _impl_.eye_look_out_left_),
  PROTOBUF_FIELD_OFFSET(::service::ARKitBlendShapes, _impl_.eye_look_out_right_),
  PROTOBUF_FIELD_OFFSET(::service::ARKitBlendShapes, _impl_.eye_look_up_left_),
  PROTOBUF_FIELD_OFFSET(::service::ARKitBlendShapes, _impl_.eye_look_up_right_),
  PROTOBUF_FIELD_OFFSET(::service::ARKitBlendShapes, _impl_.eye_squint_left_),
  PROTOBUF_FIELD_OFFSET(::service::ARKitBlendShapes, _impl_.eye_squint_right_),
  PROTOBUF_FIELD_OFFSET(::service::ARKitBlendShapes, _impl_.eye_wide_left_),
  PROTOBUF_FIELD_OFFSET(::service::ARKitBlendShapes, _impl_.eye_wide_right_),
  PROTOBUF_FIELD_OFFSET(::service::ARKitBlendShapes, _impl_.jaw_forward_),
  PROTOBUF_FIELD_OFFSET(::service::ARKitBlendShapes, _impl_.jaw_left_),
  PROTOBUF_FIELD_OFFSET(::service::ARKitBlendShapes, _impl_.jaw_open_),
  PROTOBUF_FIELD_OFFSET(::service::ARKitBlendShapes, _impl_.jaw_right_),
  PROTOBUF_FIELD_OFFSET(::service::ARKitBlendShapes, _impl_.mouth_close_),
  PROTOBUF_FIELD_OFFSET(::service::ARKitBlendShapes, _impl_.mouth_dimple_left_),
  PROTOBUF_FIELD_OFFSET(::service::ARKitBlendShapes, _impl_.mouth_dimple_right_),
  PROTOBUF_FIELD_OFFSET(::service::ARKitBlendShapes, _impl_.mouth_frown_left_),
  PROTOBUF_FIELD_OFFSET(::service::ARKitBlendShapes, _impl_.mouth_frown_right_),
  PROTOBUF_FIELD_OFFSET(::service::ARKitBlendShapes, _impl_.mouth_funnel_),
  PROTOBUF_FIELD_OFFSET(::service::ARKitBlendShapes, _impl_.mouth_left_),
  PROTOBUF_FIELD_OFFSET(::service::ARKitBlendShapes, _impl_.mouth_lower_down_left_),
  PROTOBUF_FIELD_OFFSET(::service::ARKitBlendShapes, _impl_.mouth_lower_down_right_),
  PROTOBUF_FIELD_OFFSET(::service::ARKitBlendShapes, _impl_.mouth_press_left_),
  PROTOBUF_FIELD_OFFSET(::service::ARKitBlendShapes, _impl_.mouth_press_right_),
  PROTOBUF_FIELD_OFFSET(::service::ARKitBlendShapes, _impl_.mouth_pucker_),
  PROTOBUF_FIELD_OFFSET(::service::ARKitBlendShapes, _impl_.mouth_right_),
  PROTOBUF_FIELD_OFFSET(::service::ARKitBlendShapes, _impl_.mouth_roll_lower_),
  PROTOBUF_FIELD_OFFSET(::service::ARKitBlendShapes, _impl_.mouth_roll_upper_),
  PROTOBUF_FIELD_OFFSET(::service::ARKitBlendShapes, _impl_.mouth_shrug_lower_),
  PROTOBUF_FIELD_OFFSET(::service::ARKitBlendShapes, _impl_.mouth_shrug_upper_),
  PROTOBUF_FIELD_OFFSET(::service::ARKitBlendShapes, _impl_.mouth_smile_left_),
  PROTOBUF_FIELD_OFFSET(::service::ARKitBlendShapes, _impl_.mouth_smile_right_),
  PROTOBUF_FIELD_OFFSET(::service::ARKitBlendShapes, _impl_.mouth_stretch_left_),
  PROTOBUF_FIELD_OFFSET(::service::ARKitBlendShapes, _impl_.mouth_stretch_right_),
  PROTOBUF_FIELD_OFFSET(::service::ARKitBlendShapes, _impl_.mouth_upper_up_left_),
  PROTOBUF_FIELD_OFFSET(::service::ARKitBlendShapes, _impl_.mouth_upper_up_right_),
  PROTOBUF_FIELD_OFFSET(::service::ARKitBlendShapes, _impl_.nose_sneer_left_),
  PROTOBUF_FIELD_OFFSET(::service::ARKitBlendShapes, _impl_.nose_sneer_right_),
  PROTOBUF_FIELD_OFFSET(::service::ARKitBlendShapes, _impl_.tongue_out_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::service::ARKitBlendShapesData)},
  { 7, -1, -1, sizeof(::service::ARKitBlendShapes)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::service::_ARKitBlendShapesData_default_instance_._instance,
  &::service::_ARKitBlendShapes_default_instance_._instance,
};

const char descriptor_table_protodef_arkit_5fblend_5fshapes_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\030arkit_blend_shapes.proto\022\007service\"N\n\024A"
  "RKitBlendShapesData\0226\n\023ar_kit_blend_shap"
  "es\030\001 \001(\0132\031.service.ARKitBlendShapes\"\273\n\n\020"
  "ARKitBlendShapes\022\026\n\016brow_down_left\030\001 \001(\002"
  "\022\027\n\017brow_down_right\030\002 \001(\002\022\025\n\rbrow_inner_"
  "up\030\003 \001(\002\022\032\n\022brow_outer_up_left\030\004 \001(\002\022\033\n\023"
  "brow_outer_up_right\030\005 \001(\002\022\022\n\ncheek_puff\030"
  "\006 \001(\002\022\031\n\021cheek_squint_left\030\007 \001(\002\022\032\n\022chee"
  "k_squint_right\030\010 \001(\002\022\026\n\016eye_blink_left\030\t"
  " \001(\002\022\027\n\017eye_blink_right\030\n \001(\002\022\032\n\022eye_loo"
  "k_down_left\030\013 \001(\002\022\033\n\023eye_look_down_right"
  "\030\014 \001(\002\022\030\n\020eye_look_in_left\030\r \001(\002\022\031\n\021eye_"
  "look_in_right\030\016 \001(\002\022\031\n\021eye_look_out_left"
  "\030\017 \001(\002\022\032\n\022eye_look_out_right\030\020 \001(\002\022\030\n\020ey"
  "e_look_up_left\030\021 \001(\002\022\031\n\021eye_look_up_righ"
  "t\030\022 \001(\002\022\027\n\017eye_squint_left\030\023 \001(\002\022\030\n\020eye_"
  "squint_right\030\024 \001(\002\022\025\n\reye_wide_left\030\025 \001("
  "\002\022\026\n\016eye_wide_right\030\026 \001(\002\022\023\n\013jaw_forward"
  "\030\027 \001(\002\022\020\n\010jaw_left\030\030 \001(\002\022\020\n\010jaw_open\030\031 \001"
  "(\002\022\021\n\tjaw_right\030\032 \001(\002\022\023\n\013mouth_close\030\033 \001"
  "(\002\022\031\n\021mouth_dimple_left\030\034 \001(\002\022\032\n\022mouth_d"
  "imple_right\030\035 \001(\002\022\030\n\020mouth_frown_left\030\036 "
  "\001(\002\022\031\n\021mouth_frown_right\030\037 \001(\002\022\024\n\014mouth_"
  "funnel\030  \001(\002\022\022\n\nmouth_left\030! \001(\002\022\035\n\025mout"
  "h_lower_down_left\030\" \001(\002\022\036\n\026mouth_lower_d"
  "own_right\030# \001(\002\022\030\n\020mouth_press_left\030$ \001("
  "\002\022\031\n\021mouth_press_right\030% \001(\002\022\024\n\014mouth_pu"
  "cker\030& \001(\002\022\023\n\013mouth_right\030\' \001(\002\022\030\n\020mouth"
  "_roll_lower\030( \001(\002\022\030\n\020mouth_roll_upper\030) "
  "\001(\002\022\031\n\021mouth_shrug_lower\030* \001(\002\022\031\n\021mouth_"
  "shrug_upper\030+ \001(\002\022\030\n\020mouth_smile_left\030, "
  "\001(\002\022\031\n\021mouth_smile_right\030- \001(\002\022\032\n\022mouth_"
  "stretch_left\030. \001(\002\022\033\n\023mouth_stretch_righ"
  "t\030/ \001(\002\022\033\n\023mouth_upper_up_left\0300 \001(\002\022\034\n\024"
  "mouth_upper_up_right\0301 \001(\002\022\027\n\017nose_sneer"
  "_left\0302 \001(\002\022\030\n\020nose_sneer_right\0303 \001(\002\022\022\n"
  "\ntongue_out\0304 \001(\002b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_arkit_5fblend_5fshapes_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_arkit_5fblend_5fshapes_2eproto = {
    false, false, 1465, descriptor_table_protodef_arkit_5fblend_5fshapes_2eproto,
    "arkit_blend_shapes.proto",
    &descriptor_table_arkit_5fblend_5fshapes_2eproto_once, nullptr, 0, 2,
    schemas, file_default_instances, TableStruct_arkit_5fblend_5fshapes_2eproto::offsets,
    file_level_metadata_arkit_5fblend_5fshapes_2eproto, file_level_enum_descriptors_arkit_5fblend_5fshapes_2eproto,
    file_level_service_descriptors_arkit_5fblend_5fshapes_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_arkit_5fblend_5fshapes_2eproto_getter() {
  return &descriptor_table_arkit_5fblend_5fshapes_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_arkit_5fblend_5fshapes_2eproto(&descriptor_table_arkit_5fblend_5fshapes_2eproto);
namespace service {

// ===================================================================

class ARKitBlendShapesData::_Internal {
 public:
  static const ::service::ARKitBlendShapes& ar_kit_blend_shapes(const ARKitBlendShapesData* msg);
};

const ::service::ARKitBlendShapes&
ARKitBlendShapesData::_Internal::ar_kit_blend_shapes(const ARKitBlendShapesData* msg) {
  return *msg->_impl_.ar_kit_blend_shapes_;
}
ARKitBlendShapesData::ARKitBlendShapesData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:service.ARKitBlendShapesData)
}
ARKitBlendShapesData::ARKitBlendShapesData(const ARKitBlendShapesData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ARKitBlendShapesData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ar_kit_blend_shapes_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_ar_kit_blend_shapes()) {
    _this->_impl_.ar_kit_blend_shapes_ = new ::service::ARKitBlendShapes(*from._impl_.ar_kit_blend_shapes_);
  }
  // @@protoc_insertion_point(copy_constructor:service.ARKitBlendShapesData)
}

inline void ARKitBlendShapesData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ar_kit_blend_shapes_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ARKitBlendShapesData::~ARKitBlendShapesData() {
  // @@protoc_insertion_point(destructor:service.ARKitBlendShapesData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ARKitBlendShapesData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.ar_kit_blend_shapes_;
}

void ARKitBlendShapesData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ARKitBlendShapesData::Clear() {
// @@protoc_insertion_point(message_clear_start:service.ARKitBlendShapesData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.ar_kit_blend_shapes_ != nullptr) {
    delete _impl_.ar_kit_blend_shapes_;
  }
  _impl_.ar_kit_blend_shapes_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ARKitBlendShapesData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .service.ARKitBlendShapes ar_kit_blend_shapes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ar_kit_blend_shapes(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ARKitBlendShapesData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service.ARKitBlendShapesData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .service.ARKitBlendShapes ar_kit_blend_shapes = 1;
  if (this->_internal_has_ar_kit_blend_shapes()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::ar_kit_blend_shapes(this),
        _Internal::ar_kit_blend_shapes(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service.ARKitBlendShapesData)
  return target;
}

size_t ARKitBlendShapesData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service.ARKitBlendShapesData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .service.ARKitBlendShapes ar_kit_blend_shapes = 1;
  if (this->_internal_has_ar_kit_blend_shapes()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.ar_kit_blend_shapes_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ARKitBlendShapesData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ARKitBlendShapesData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ARKitBlendShapesData::GetClassData() const { return &_class_data_; }


void ARKitBlendShapesData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ARKitBlendShapesData*>(&to_msg);
  auto& from = static_cast<const ARKitBlendShapesData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:service.ARKitBlendShapesData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_ar_kit_blend_shapes()) {
    _this->_internal_mutable_ar_kit_blend_shapes()->::service::ARKitBlendShapes::MergeFrom(
        from._internal_ar_kit_blend_shapes());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ARKitBlendShapesData::CopyFrom(const ARKitBlendShapesData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service.ARKitBlendShapesData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ARKitBlendShapesData::IsInitialized() const {
  return true;
}

void ARKitBlendShapesData::InternalSwap(ARKitBlendShapesData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.ar_kit_blend_shapes_, other->_impl_.ar_kit_blend_shapes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ARKitBlendShapesData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_arkit_5fblend_5fshapes_2eproto_getter, &descriptor_table_arkit_5fblend_5fshapes_2eproto_once,
      file_level_metadata_arkit_5fblend_5fshapes_2eproto[0]);
}

// ===================================================================

class ARKitBlendShapes::_Internal {
 public:
};

ARKitBlendShapes::ARKitBlendShapes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:service.ARKitBlendShapes)
}
ARKitBlendShapes::ARKitBlendShapes(const ARKitBlendShapes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ARKitBlendShapes* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.brow_down_left_){}
    , decltype(_impl_.brow_down_right_){}
    , decltype(_impl_.brow_inner_up_){}
    , decltype(_impl_.brow_outer_up_left_){}
    , decltype(_impl_.brow_outer_up_right_){}
    , decltype(_impl_.cheek_puff_){}
    , decltype(_impl_.cheek_squint_left_){}
    , decltype(_impl_.cheek_squint_right_){}
    , decltype(_impl_.eye_blink_left_){}
    , decltype(_impl_.eye_blink_right_){}
    , decltype(_impl_.eye_look_down_left_){}
    , decltype(_impl_.eye_look_down_right_){}
    , decltype(_impl_.eye_look_in_left_){}
    , decltype(_impl_.eye_look_in_right_){}
    , decltype(_impl_.eye_look_out_left_){}
    , decltype(_impl_.eye_look_out_right_){}
    , decltype(_impl_.eye_look_up_left_){}
    , decltype(_impl_.eye_look_up_right_){}
    , decltype(_impl_.eye_squint_left_){}
    , decltype(_impl_.eye_squint_right_){}
    , decltype(_impl_.eye_wide_left_){}
    , decltype(_impl_.eye_wide_right_){}
    , decltype(_impl_.jaw_forward_){}
    , decltype(_impl_.jaw_left_){}
    , decltype(_impl_.jaw_open_){}
    , decltype(_impl_.jaw_right_){}
    , decltype(_impl_.mouth_close_){}
    , decltype(_impl_.mouth_dimple_left_){}
    , decltype(_impl_.mouth_dimple_right_){}
    , decltype(_impl_.mouth_frown_left_){}
    , decltype(_impl_.mouth_frown_right_){}
    , decltype(_impl_.mouth_funnel_){}
    , decltype(_impl_.mouth_left_){}
    , decltype(_impl_.mouth_lower_down_left_){}
    , decltype(_impl_.mouth_lower_down_right_){}
    , decltype(_impl_.mouth_press_left_){}
    , decltype(_impl_.mouth_press_right_){}
    , decltype(_impl_.mouth_pucker_){}
    , decltype(_impl_.mouth_right_){}
    , decltype(_impl_.mouth_roll_lower_){}
    , decltype(_impl_.mouth_roll_upper_){}
    , decltype(_impl_.mouth_shrug_lower_){}
    , decltype(_impl_.mouth_shrug_upper_){}
    , decltype(_impl_.mouth_smile_left_){}
    , decltype(_impl_.mouth_smile_right_){}
    , decltype(_impl_.mouth_stretch_left_){}
    , decltype(_impl_.mouth_stretch_right_){}
    , decltype(_impl_.mouth_upper_up_left_){}
    , decltype(_impl_.mouth_upper_up_right_){}
    , decltype(_impl_.nose_sneer_left_){}
    , decltype(_impl_.nose_sneer_right_){}
    , decltype(_impl_.tongue_out_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.brow_down_left_, &from._impl_.brow_down_left_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.tongue_out_) -
    reinterpret_cast<char*>(&_impl_.brow_down_left_)) + sizeof(_impl_.tongue_out_));
  // @@protoc_insertion_point(copy_constructor:service.ARKitBlendShapes)
}

inline void ARKitBlendShapes::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.brow_down_left_){0}
    , decltype(_impl_.brow_down_right_){0}
    , decltype(_impl_.brow_inner_up_){0}
    , decltype(_impl_.brow_outer_up_left_){0}
    , decltype(_impl_.brow_outer_up_right_){0}
    , decltype(_impl_.cheek_puff_){0}
    , decltype(_impl_.cheek_squint_left_){0}
    , decltype(_impl_.cheek_squint_right_){0}
    , decltype(_impl_.eye_blink_left_){0}
    , decltype(_impl_.eye_blink_right_){0}
    , decltype(_impl_.eye_look_down_left_){0}
    , decltype(_impl_.eye_look_down_right_){0}
    , decltype(_impl_.eye_look_in_left_){0}
    , decltype(_impl_.eye_look_in_right_){0}
    , decltype(_impl_.eye_look_out_left_){0}
    , decltype(_impl_.eye_look_out_right_){0}
    , decltype(_impl_.eye_look_up_left_){0}
    , decltype(_impl_.eye_look_up_right_){0}
    , decltype(_impl_.eye_squint_left_){0}
    , decltype(_impl_.eye_squint_right_){0}
    , decltype(_impl_.eye_wide_left_){0}
    , decltype(_impl_.eye_wide_right_){0}
    , decltype(_impl_.jaw_forward_){0}
    , decltype(_impl_.jaw_left_){0}
    , decltype(_impl_.jaw_open_){0}
    , decltype(_impl_.jaw_right_){0}
    , decltype(_impl_.mouth_close_){0}
    , decltype(_impl_.mouth_dimple_left_){0}
    , decltype(_impl_.mouth_dimple_right_){0}
    , decltype(_impl_.mouth_frown_left_){0}
    , decltype(_impl_.mouth_frown_right_){0}
    , decltype(_impl_.mouth_funnel_){0}
    , decltype(_impl_.mouth_left_){0}
    , decltype(_impl_.mouth_lower_down_left_){0}
    , decltype(_impl_.mouth_lower_down_right_){0}
    , decltype(_impl_.mouth_press_left_){0}
    , decltype(_impl_.mouth_press_right_){0}
    , decltype(_impl_.mouth_pucker_){0}
    , decltype(_impl_.mouth_right_){0}
    , decltype(_impl_.mouth_roll_lower_){0}
    , decltype(_impl_.mouth_roll_upper_){0}
    , decltype(_impl_.mouth_shrug_lower_){0}
    , decltype(_impl_.mouth_shrug_upper_){0}
    , decltype(_impl_.mouth_smile_left_){0}
    , decltype(_impl_.mouth_smile_right_){0}
    , decltype(_impl_.mouth_stretch_left_){0}
    , decltype(_impl_.mouth_stretch_right_){0}
    , decltype(_impl_.mouth_upper_up_left_){0}
    , decltype(_impl_.mouth_upper_up_right_){0}
    , decltype(_impl_.nose_sneer_left_){0}
    , decltype(_impl_.nose_sneer_right_){0}
    , decltype(_impl_.tongue_out_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ARKitBlendShapes::~ARKitBlendShapes() {
  // @@protoc_insertion_point(destructor:service.ARKitBlendShapes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ARKitBlendShapes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ARKitBlendShapes::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ARKitBlendShapes::Clear() {
// @@protoc_insertion_point(message_clear_start:service.ARKitBlendShapes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.brow_down_left_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.tongue_out_) -
      reinterpret_cast<char*>(&_impl_.brow_down_left_)) + sizeof(_impl_.tongue_out_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ARKitBlendShapes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float brow_down_left = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.brow_down_left_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float brow_down_right = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.brow_down_right_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float brow_inner_up = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.brow_inner_up_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float brow_outer_up_left = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.brow_outer_up_left_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float brow_outer_up_right = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.brow_outer_up_right_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float cheek_puff = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _impl_.cheek_puff_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float cheek_squint_left = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _impl_.cheek_squint_left_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float cheek_squint_right = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          _impl_.cheek_squint_right_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float eye_blink_left = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _impl_.eye_blink_left_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float eye_blink_right = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 85)) {
          _impl_.eye_blink_right_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float eye_look_down_left = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 93)) {
          _impl_.eye_look_down_left_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float eye_look_down_right = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 101)) {
          _impl_.eye_look_down_right_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float eye_look_in_left = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 109)) {
          _impl_.eye_look_in_left_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float eye_look_in_right = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 117)) {
          _impl_.eye_look_in_right_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float eye_look_out_left = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 125)) {
          _impl_.eye_look_out_left_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float eye_look_out_right = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 133)) {
          _impl_.eye_look_out_right_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float eye_look_up_left = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 141)) {
          _impl_.eye_look_up_left_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float eye_look_up_right = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 149)) {
          _impl_.eye_look_up_right_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float eye_squint_left = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 157)) {
          _impl_.eye_squint_left_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float eye_squint_right = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 165)) {
          _impl_.eye_squint_right_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float eye_wide_left = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 173)) {
          _impl_.eye_wide_left_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float eye_wide_right = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 181)) {
          _impl_.eye_wide_right_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float jaw_forward = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 189)) {
          _impl_.jaw_forward_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float jaw_left = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 197)) {
          _impl_.jaw_left_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float jaw_open = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 205)) {
          _impl_.jaw_open_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float jaw_right = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 213)) {
          _impl_.jaw_right_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float mouth_close = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 221)) {
          _impl_.mouth_close_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float mouth_dimple_left = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 229)) {
          _impl_.mouth_dimple_left_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float mouth_dimple_right = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 237)) {
          _impl_.mouth_dimple_right_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float mouth_frown_left = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 245)) {
          _impl_.mouth_frown_left_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float mouth_frown_right = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 253)) {
          _impl_.mouth_frown_right_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float mouth_funnel = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 5)) {
          _impl_.mouth_funnel_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float mouth_left = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.mouth_left_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float mouth_lower_down_left = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.mouth_lower_down_left_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float mouth_lower_down_right = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.mouth_lower_down_right_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float mouth_press_left = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.mouth_press_left_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float mouth_press_right = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.mouth_press_right_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float mouth_pucker = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _impl_.mouth_pucker_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float mouth_right = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _impl_.mouth_right_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float mouth_roll_lower = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          _impl_.mouth_roll_lower_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float mouth_roll_upper = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _impl_.mouth_roll_upper_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float mouth_shrug_lower = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 85)) {
          _impl_.mouth_shrug_lower_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float mouth_shrug_upper = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 93)) {
          _impl_.mouth_shrug_upper_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float mouth_smile_left = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 101)) {
          _impl_.mouth_smile_left_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float mouth_smile_right = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 109)) {
          _impl_.mouth_smile_right_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float mouth_stretch_left = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 117)) {
          _impl_.mouth_stretch_left_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float mouth_stretch_right = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 125)) {
          _impl_.mouth_stretch_right_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float mouth_upper_up_left = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 133)) {
          _impl_.mouth_upper_up_left_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float mouth_upper_up_right = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 141)) {
          _impl_.mouth_upper_up_right_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float nose_sneer_left = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 149)) {
          _impl_.nose_sneer_left_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float nose_sneer_right = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 157)) {
          _impl_.nose_sneer_right_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float tongue_out = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 165)) {
          _impl_.tongue_out_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ARKitBlendShapes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service.ARKitBlendShapes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float brow_down_left = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_brow_down_left = this->_internal_brow_down_left();
  uint32_t raw_brow_down_left;
  memcpy(&raw_brow_down_left, &tmp_brow_down_left, sizeof(tmp_brow_down_left));
  if (raw_brow_down_left != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_brow_down_left(), target);
  }

  // float brow_down_right = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_brow_down_right = this->_internal_brow_down_right();
  uint32_t raw_brow_down_right;
  memcpy(&raw_brow_down_right, &tmp_brow_down_right, sizeof(tmp_brow_down_right));
  if (raw_brow_down_right != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_brow_down_right(), target);
  }

  // float brow_inner_up = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_brow_inner_up = this->_internal_brow_inner_up();
  uint32_t raw_brow_inner_up;
  memcpy(&raw_brow_inner_up, &tmp_brow_inner_up, sizeof(tmp_brow_inner_up));
  if (raw_brow_inner_up != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_brow_inner_up(), target);
  }

  // float brow_outer_up_left = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_brow_outer_up_left = this->_internal_brow_outer_up_left();
  uint32_t raw_brow_outer_up_left;
  memcpy(&raw_brow_outer_up_left, &tmp_brow_outer_up_left, sizeof(tmp_brow_outer_up_left));
  if (raw_brow_outer_up_left != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_brow_outer_up_left(), target);
  }

  // float brow_outer_up_right = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_brow_outer_up_right = this->_internal_brow_outer_up_right();
  uint32_t raw_brow_outer_up_right;
  memcpy(&raw_brow_outer_up_right, &tmp_brow_outer_up_right, sizeof(tmp_brow_outer_up_right));
  if (raw_brow_outer_up_right != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_brow_outer_up_right(), target);
  }

  // float cheek_puff = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_cheek_puff = this->_internal_cheek_puff();
  uint32_t raw_cheek_puff;
  memcpy(&raw_cheek_puff, &tmp_cheek_puff, sizeof(tmp_cheek_puff));
  if (raw_cheek_puff != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_cheek_puff(), target);
  }

  // float cheek_squint_left = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_cheek_squint_left = this->_internal_cheek_squint_left();
  uint32_t raw_cheek_squint_left;
  memcpy(&raw_cheek_squint_left, &tmp_cheek_squint_left, sizeof(tmp_cheek_squint_left));
  if (raw_cheek_squint_left != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_cheek_squint_left(), target);
  }

  // float cheek_squint_right = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_cheek_squint_right = this->_internal_cheek_squint_right();
  uint32_t raw_cheek_squint_right;
  memcpy(&raw_cheek_squint_right, &tmp_cheek_squint_right, sizeof(tmp_cheek_squint_right));
  if (raw_cheek_squint_right != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(8, this->_internal_cheek_squint_right(), target);
  }

  // float eye_blink_left = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_eye_blink_left = this->_internal_eye_blink_left();
  uint32_t raw_eye_blink_left;
  memcpy(&raw_eye_blink_left, &tmp_eye_blink_left, sizeof(tmp_eye_blink_left));
  if (raw_eye_blink_left != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(9, this->_internal_eye_blink_left(), target);
  }

  // float eye_blink_right = 10;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_eye_blink_right = this->_internal_eye_blink_right();
  uint32_t raw_eye_blink_right;
  memcpy(&raw_eye_blink_right, &tmp_eye_blink_right, sizeof(tmp_eye_blink_right));
  if (raw_eye_blink_right != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(10, this->_internal_eye_blink_right(), target);
  }

  // float eye_look_down_left = 11;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_eye_look_down_left = this->_internal_eye_look_down_left();
  uint32_t raw_eye_look_down_left;
  memcpy(&raw_eye_look_down_left, &tmp_eye_look_down_left, sizeof(tmp_eye_look_down_left));
  if (raw_eye_look_down_left != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(11, this->_internal_eye_look_down_left(), target);
  }

  // float eye_look_down_right = 12;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_eye_look_down_right = this->_internal_eye_look_down_right();
  uint32_t raw_eye_look_down_right;
  memcpy(&raw_eye_look_down_right, &tmp_eye_look_down_right, sizeof(tmp_eye_look_down_right));
  if (raw_eye_look_down_right != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(12, this->_internal_eye_look_down_right(), target);
  }

  // float eye_look_in_left = 13;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_eye_look_in_left = this->_internal_eye_look_in_left();
  uint32_t raw_eye_look_in_left;
  memcpy(&raw_eye_look_in_left, &tmp_eye_look_in_left, sizeof(tmp_eye_look_in_left));
  if (raw_eye_look_in_left != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(13, this->_internal_eye_look_in_left(), target);
  }

  // float eye_look_in_right = 14;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_eye_look_in_right = this->_internal_eye_look_in_right();
  uint32_t raw_eye_look_in_right;
  memcpy(&raw_eye_look_in_right, &tmp_eye_look_in_right, sizeof(tmp_eye_look_in_right));
  if (raw_eye_look_in_right != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(14, this->_internal_eye_look_in_right(), target);
  }

  // float eye_look_out_left = 15;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_eye_look_out_left = this->_internal_eye_look_out_left();
  uint32_t raw_eye_look_out_left;
  memcpy(&raw_eye_look_out_left, &tmp_eye_look_out_left, sizeof(tmp_eye_look_out_left));
  if (raw_eye_look_out_left != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(15, this->_internal_eye_look_out_left(), target);
  }

  // float eye_look_out_right = 16;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_eye_look_out_right = this->_internal_eye_look_out_right();
  uint32_t raw_eye_look_out_right;
  memcpy(&raw_eye_look_out_right, &tmp_eye_look_out_right, sizeof(tmp_eye_look_out_right));
  if (raw_eye_look_out_right != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(16, this->_internal_eye_look_out_right(), target);
  }

  // float eye_look_up_left = 17;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_eye_look_up_left = this->_internal_eye_look_up_left();
  uint32_t raw_eye_look_up_left;
  memcpy(&raw_eye_look_up_left, &tmp_eye_look_up_left, sizeof(tmp_eye_look_up_left));
  if (raw_eye_look_up_left != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(17, this->_internal_eye_look_up_left(), target);
  }

  // float eye_look_up_right = 18;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_eye_look_up_right = this->_internal_eye_look_up_right();
  uint32_t raw_eye_look_up_right;
  memcpy(&raw_eye_look_up_right, &tmp_eye_look_up_right, sizeof(tmp_eye_look_up_right));
  if (raw_eye_look_up_right != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(18, this->_internal_eye_look_up_right(), target);
  }

  // float eye_squint_left = 19;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_eye_squint_left = this->_internal_eye_squint_left();
  uint32_t raw_eye_squint_left;
  memcpy(&raw_eye_squint_left, &tmp_eye_squint_left, sizeof(tmp_eye_squint_left));
  if (raw_eye_squint_left != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(19, this->_internal_eye_squint_left(), target);
  }

  // float eye_squint_right = 20;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_eye_squint_right = this->_internal_eye_squint_right();
  uint32_t raw_eye_squint_right;
  memcpy(&raw_eye_squint_right, &tmp_eye_squint_right, sizeof(tmp_eye_squint_right));
  if (raw_eye_squint_right != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(20, this->_internal_eye_squint_right(), target);
  }

  // float eye_wide_left = 21;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_eye_wide_left = this->_internal_eye_wide_left();
  uint32_t raw_eye_wide_left;
  memcpy(&raw_eye_wide_left, &tmp_eye_wide_left, sizeof(tmp_eye_wide_left));
  if (raw_eye_wide_left != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(21, this->_internal_eye_wide_left(), target);
  }

  // float eye_wide_right = 22;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_eye_wide_right = this->_internal_eye_wide_right();
  uint32_t raw_eye_wide_right;
  memcpy(&raw_eye_wide_right, &tmp_eye_wide_right, sizeof(tmp_eye_wide_right));
  if (raw_eye_wide_right != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(22, this->_internal_eye_wide_right(), target);
  }

  // float jaw_forward = 23;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_jaw_forward = this->_internal_jaw_forward();
  uint32_t raw_jaw_forward;
  memcpy(&raw_jaw_forward, &tmp_jaw_forward, sizeof(tmp_jaw_forward));
  if (raw_jaw_forward != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(23, this->_internal_jaw_forward(), target);
  }

  // float jaw_left = 24;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_jaw_left = this->_internal_jaw_left();
  uint32_t raw_jaw_left;
  memcpy(&raw_jaw_left, &tmp_jaw_left, sizeof(tmp_jaw_left));
  if (raw_jaw_left != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(24, this->_internal_jaw_left(), target);
  }

  // float jaw_open = 25;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_jaw_open = this->_internal_jaw_open();
  uint32_t raw_jaw_open;
  memcpy(&raw_jaw_open, &tmp_jaw_open, sizeof(tmp_jaw_open));
  if (raw_jaw_open != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(25, this->_internal_jaw_open(), target);
  }

  // float jaw_right = 26;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_jaw_right = this->_internal_jaw_right();
  uint32_t raw_jaw_right;
  memcpy(&raw_jaw_right, &tmp_jaw_right, sizeof(tmp_jaw_right));
  if (raw_jaw_right != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(26, this->_internal_jaw_right(), target);
  }

  // float mouth_close = 27;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mouth_close = this->_internal_mouth_close();
  uint32_t raw_mouth_close;
  memcpy(&raw_mouth_close, &tmp_mouth_close, sizeof(tmp_mouth_close));
  if (raw_mouth_close != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(27, this->_internal_mouth_close(), target);
  }

  // float mouth_dimple_left = 28;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mouth_dimple_left = this->_internal_mouth_dimple_left();
  uint32_t raw_mouth_dimple_left;
  memcpy(&raw_mouth_dimple_left, &tmp_mouth_dimple_left, sizeof(tmp_mouth_dimple_left));
  if (raw_mouth_dimple_left != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(28, this->_internal_mouth_dimple_left(), target);
  }

  // float mouth_dimple_right = 29;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mouth_dimple_right = this->_internal_mouth_dimple_right();
  uint32_t raw_mouth_dimple_right;
  memcpy(&raw_mouth_dimple_right, &tmp_mouth_dimple_right, sizeof(tmp_mouth_dimple_right));
  if (raw_mouth_dimple_right != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(29, this->_internal_mouth_dimple_right(), target);
  }

  // float mouth_frown_left = 30;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mouth_frown_left = this->_internal_mouth_frown_left();
  uint32_t raw_mouth_frown_left;
  memcpy(&raw_mouth_frown_left, &tmp_mouth_frown_left, sizeof(tmp_mouth_frown_left));
  if (raw_mouth_frown_left != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(30, this->_internal_mouth_frown_left(), target);
  }

  // float mouth_frown_right = 31;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mouth_frown_right = this->_internal_mouth_frown_right();
  uint32_t raw_mouth_frown_right;
  memcpy(&raw_mouth_frown_right, &tmp_mouth_frown_right, sizeof(tmp_mouth_frown_right));
  if (raw_mouth_frown_right != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(31, this->_internal_mouth_frown_right(), target);
  }

  // float mouth_funnel = 32;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mouth_funnel = this->_internal_mouth_funnel();
  uint32_t raw_mouth_funnel;
  memcpy(&raw_mouth_funnel, &tmp_mouth_funnel, sizeof(tmp_mouth_funnel));
  if (raw_mouth_funnel != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(32, this->_internal_mouth_funnel(), target);
  }

  // float mouth_left = 33;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mouth_left = this->_internal_mouth_left();
  uint32_t raw_mouth_left;
  memcpy(&raw_mouth_left, &tmp_mouth_left, sizeof(tmp_mouth_left));
  if (raw_mouth_left != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(33, this->_internal_mouth_left(), target);
  }

  // float mouth_lower_down_left = 34;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mouth_lower_down_left = this->_internal_mouth_lower_down_left();
  uint32_t raw_mouth_lower_down_left;
  memcpy(&raw_mouth_lower_down_left, &tmp_mouth_lower_down_left, sizeof(tmp_mouth_lower_down_left));
  if (raw_mouth_lower_down_left != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(34, this->_internal_mouth_lower_down_left(), target);
  }

  // float mouth_lower_down_right = 35;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mouth_lower_down_right = this->_internal_mouth_lower_down_right();
  uint32_t raw_mouth_lower_down_right;
  memcpy(&raw_mouth_lower_down_right, &tmp_mouth_lower_down_right, sizeof(tmp_mouth_lower_down_right));
  if (raw_mouth_lower_down_right != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(35, this->_internal_mouth_lower_down_right(), target);
  }

  // float mouth_press_left = 36;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mouth_press_left = this->_internal_mouth_press_left();
  uint32_t raw_mouth_press_left;
  memcpy(&raw_mouth_press_left, &tmp_mouth_press_left, sizeof(tmp_mouth_press_left));
  if (raw_mouth_press_left != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(36, this->_internal_mouth_press_left(), target);
  }

  // float mouth_press_right = 37;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mouth_press_right = this->_internal_mouth_press_right();
  uint32_t raw_mouth_press_right;
  memcpy(&raw_mouth_press_right, &tmp_mouth_press_right, sizeof(tmp_mouth_press_right));
  if (raw_mouth_press_right != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(37, this->_internal_mouth_press_right(), target);
  }

  // float mouth_pucker = 38;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mouth_pucker = this->_internal_mouth_pucker();
  uint32_t raw_mouth_pucker;
  memcpy(&raw_mouth_pucker, &tmp_mouth_pucker, sizeof(tmp_mouth_pucker));
  if (raw_mouth_pucker != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(38, this->_internal_mouth_pucker(), target);
  }

  // float mouth_right = 39;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mouth_right = this->_internal_mouth_right();
  uint32_t raw_mouth_right;
  memcpy(&raw_mouth_right, &tmp_mouth_right, sizeof(tmp_mouth_right));
  if (raw_mouth_right != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(39, this->_internal_mouth_right(), target);
  }

  // float mouth_roll_lower = 40;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mouth_roll_lower = this->_internal_mouth_roll_lower();
  uint32_t raw_mouth_roll_lower;
  memcpy(&raw_mouth_roll_lower, &tmp_mouth_roll_lower, sizeof(tmp_mouth_roll_lower));
  if (raw_mouth_roll_lower != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(40, this->_internal_mouth_roll_lower(), target);
  }

  // float mouth_roll_upper = 41;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mouth_roll_upper = this->_internal_mouth_roll_upper();
  uint32_t raw_mouth_roll_upper;
  memcpy(&raw_mouth_roll_upper, &tmp_mouth_roll_upper, sizeof(tmp_mouth_roll_upper));
  if (raw_mouth_roll_upper != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(41, this->_internal_mouth_roll_upper(), target);
  }

  // float mouth_shrug_lower = 42;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mouth_shrug_lower = this->_internal_mouth_shrug_lower();
  uint32_t raw_mouth_shrug_lower;
  memcpy(&raw_mouth_shrug_lower, &tmp_mouth_shrug_lower, sizeof(tmp_mouth_shrug_lower));
  if (raw_mouth_shrug_lower != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(42, this->_internal_mouth_shrug_lower(), target);
  }

  // float mouth_shrug_upper = 43;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mouth_shrug_upper = this->_internal_mouth_shrug_upper();
  uint32_t raw_mouth_shrug_upper;
  memcpy(&raw_mouth_shrug_upper, &tmp_mouth_shrug_upper, sizeof(tmp_mouth_shrug_upper));
  if (raw_mouth_shrug_upper != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(43, this->_internal_mouth_shrug_upper(), target);
  }

  // float mouth_smile_left = 44;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mouth_smile_left = this->_internal_mouth_smile_left();
  uint32_t raw_mouth_smile_left;
  memcpy(&raw_mouth_smile_left, &tmp_mouth_smile_left, sizeof(tmp_mouth_smile_left));
  if (raw_mouth_smile_left != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(44, this->_internal_mouth_smile_left(), target);
  }

  // float mouth_smile_right = 45;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mouth_smile_right = this->_internal_mouth_smile_right();
  uint32_t raw_mouth_smile_right;
  memcpy(&raw_mouth_smile_right, &tmp_mouth_smile_right, sizeof(tmp_mouth_smile_right));
  if (raw_mouth_smile_right != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(45, this->_internal_mouth_smile_right(), target);
  }

  // float mouth_stretch_left = 46;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mouth_stretch_left = this->_internal_mouth_stretch_left();
  uint32_t raw_mouth_stretch_left;
  memcpy(&raw_mouth_stretch_left, &tmp_mouth_stretch_left, sizeof(tmp_mouth_stretch_left));
  if (raw_mouth_stretch_left != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(46, this->_internal_mouth_stretch_left(), target);
  }

  // float mouth_stretch_right = 47;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mouth_stretch_right = this->_internal_mouth_stretch_right();
  uint32_t raw_mouth_stretch_right;
  memcpy(&raw_mouth_stretch_right, &tmp_mouth_stretch_right, sizeof(tmp_mouth_stretch_right));
  if (raw_mouth_stretch_right != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(47, this->_internal_mouth_stretch_right(), target);
  }

  // float mouth_upper_up_left = 48;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mouth_upper_up_left = this->_internal_mouth_upper_up_left();
  uint32_t raw_mouth_upper_up_left;
  memcpy(&raw_mouth_upper_up_left, &tmp_mouth_upper_up_left, sizeof(tmp_mouth_upper_up_left));
  if (raw_mouth_upper_up_left != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(48, this->_internal_mouth_upper_up_left(), target);
  }

  // float mouth_upper_up_right = 49;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mouth_upper_up_right = this->_internal_mouth_upper_up_right();
  uint32_t raw_mouth_upper_up_right;
  memcpy(&raw_mouth_upper_up_right, &tmp_mouth_upper_up_right, sizeof(tmp_mouth_upper_up_right));
  if (raw_mouth_upper_up_right != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(49, this->_internal_mouth_upper_up_right(), target);
  }

  // float nose_sneer_left = 50;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_nose_sneer_left = this->_internal_nose_sneer_left();
  uint32_t raw_nose_sneer_left;
  memcpy(&raw_nose_sneer_left, &tmp_nose_sneer_left, sizeof(tmp_nose_sneer_left));
  if (raw_nose_sneer_left != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(50, this->_internal_nose_sneer_left(), target);
  }

  // float nose_sneer_right = 51;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_nose_sneer_right = this->_internal_nose_sneer_right();
  uint32_t raw_nose_sneer_right;
  memcpy(&raw_nose_sneer_right, &tmp_nose_sneer_right, sizeof(tmp_nose_sneer_right));
  if (raw_nose_sneer_right != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(51, this->_internal_nose_sneer_right(), target);
  }

  // float tongue_out = 52;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_tongue_out = this->_internal_tongue_out();
  uint32_t raw_tongue_out;
  memcpy(&raw_tongue_out, &tmp_tongue_out, sizeof(tmp_tongue_out));
  if (raw_tongue_out != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(52, this->_internal_tongue_out(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service.ARKitBlendShapes)
  return target;
}

size_t ARKitBlendShapes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service.ARKitBlendShapes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float brow_down_left = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_brow_down_left = this->_internal_brow_down_left();
  uint32_t raw_brow_down_left;
  memcpy(&raw_brow_down_left, &tmp_brow_down_left, sizeof(tmp_brow_down_left));
  if (raw_brow_down_left != 0) {
    total_size += 1 + 4;
  }

  // float brow_down_right = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_brow_down_right = this->_internal_brow_down_right();
  uint32_t raw_brow_down_right;
  memcpy(&raw_brow_down_right, &tmp_brow_down_right, sizeof(tmp_brow_down_right));
  if (raw_brow_down_right != 0) {
    total_size += 1 + 4;
  }

  // float brow_inner_up = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_brow_inner_up = this->_internal_brow_inner_up();
  uint32_t raw_brow_inner_up;
  memcpy(&raw_brow_inner_up, &tmp_brow_inner_up, sizeof(tmp_brow_inner_up));
  if (raw_brow_inner_up != 0) {
    total_size += 1 + 4;
  }

  // float brow_outer_up_left = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_brow_outer_up_left = this->_internal_brow_outer_up_left();
  uint32_t raw_brow_outer_up_left;
  memcpy(&raw_brow_outer_up_left, &tmp_brow_outer_up_left, sizeof(tmp_brow_outer_up_left));
  if (raw_brow_outer_up_left != 0) {
    total_size += 1 + 4;
  }

  // float brow_outer_up_right = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_brow_outer_up_right = this->_internal_brow_outer_up_right();
  uint32_t raw_brow_outer_up_right;
  memcpy(&raw_brow_outer_up_right, &tmp_brow_outer_up_right, sizeof(tmp_brow_outer_up_right));
  if (raw_brow_outer_up_right != 0) {
    total_size += 1 + 4;
  }

  // float cheek_puff = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_cheek_puff = this->_internal_cheek_puff();
  uint32_t raw_cheek_puff;
  memcpy(&raw_cheek_puff, &tmp_cheek_puff, sizeof(tmp_cheek_puff));
  if (raw_cheek_puff != 0) {
    total_size += 1 + 4;
  }

  // float cheek_squint_left = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_cheek_squint_left = this->_internal_cheek_squint_left();
  uint32_t raw_cheek_squint_left;
  memcpy(&raw_cheek_squint_left, &tmp_cheek_squint_left, sizeof(tmp_cheek_squint_left));
  if (raw_cheek_squint_left != 0) {
    total_size += 1 + 4;
  }

  // float cheek_squint_right = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_cheek_squint_right = this->_internal_cheek_squint_right();
  uint32_t raw_cheek_squint_right;
  memcpy(&raw_cheek_squint_right, &tmp_cheek_squint_right, sizeof(tmp_cheek_squint_right));
  if (raw_cheek_squint_right != 0) {
    total_size += 1 + 4;
  }

  // float eye_blink_left = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_eye_blink_left = this->_internal_eye_blink_left();
  uint32_t raw_eye_blink_left;
  memcpy(&raw_eye_blink_left, &tmp_eye_blink_left, sizeof(tmp_eye_blink_left));
  if (raw_eye_blink_left != 0) {
    total_size += 1 + 4;
  }

  // float eye_blink_right = 10;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_eye_blink_right = this->_internal_eye_blink_right();
  uint32_t raw_eye_blink_right;
  memcpy(&raw_eye_blink_right, &tmp_eye_blink_right, sizeof(tmp_eye_blink_right));
  if (raw_eye_blink_right != 0) {
    total_size += 1 + 4;
  }

  // float eye_look_down_left = 11;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_eye_look_down_left = this->_internal_eye_look_down_left();
  uint32_t raw_eye_look_down_left;
  memcpy(&raw_eye_look_down_left, &tmp_eye_look_down_left, sizeof(tmp_eye_look_down_left));
  if (raw_eye_look_down_left != 0) {
    total_size += 1 + 4;
  }

  // float eye_look_down_right = 12;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_eye_look_down_right = this->_internal_eye_look_down_right();
  uint32_t raw_eye_look_down_right;
  memcpy(&raw_eye_look_down_right, &tmp_eye_look_down_right, sizeof(tmp_eye_look_down_right));
  if (raw_eye_look_down_right != 0) {
    total_size += 1 + 4;
  }

  // float eye_look_in_left = 13;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_eye_look_in_left = this->_internal_eye_look_in_left();
  uint32_t raw_eye_look_in_left;
  memcpy(&raw_eye_look_in_left, &tmp_eye_look_in_left, sizeof(tmp_eye_look_in_left));
  if (raw_eye_look_in_left != 0) {
    total_size += 1 + 4;
  }

  // float eye_look_in_right = 14;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_eye_look_in_right = this->_internal_eye_look_in_right();
  uint32_t raw_eye_look_in_right;
  memcpy(&raw_eye_look_in_right, &tmp_eye_look_in_right, sizeof(tmp_eye_look_in_right));
  if (raw_eye_look_in_right != 0) {
    total_size += 1 + 4;
  }

  // float eye_look_out_left = 15;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_eye_look_out_left = this->_internal_eye_look_out_left();
  uint32_t raw_eye_look_out_left;
  memcpy(&raw_eye_look_out_left, &tmp_eye_look_out_left, sizeof(tmp_eye_look_out_left));
  if (raw_eye_look_out_left != 0) {
    total_size += 1 + 4;
  }

  // float eye_look_out_right = 16;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_eye_look_out_right = this->_internal_eye_look_out_right();
  uint32_t raw_eye_look_out_right;
  memcpy(&raw_eye_look_out_right, &tmp_eye_look_out_right, sizeof(tmp_eye_look_out_right));
  if (raw_eye_look_out_right != 0) {
    total_size += 2 + 4;
  }

  // float eye_look_up_left = 17;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_eye_look_up_left = this->_internal_eye_look_up_left();
  uint32_t raw_eye_look_up_left;
  memcpy(&raw_eye_look_up_left, &tmp_eye_look_up_left, sizeof(tmp_eye_look_up_left));
  if (raw_eye_look_up_left != 0) {
    total_size += 2 + 4;
  }

  // float eye_look_up_right = 18;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_eye_look_up_right = this->_internal_eye_look_up_right();
  uint32_t raw_eye_look_up_right;
  memcpy(&raw_eye_look_up_right, &tmp_eye_look_up_right, sizeof(tmp_eye_look_up_right));
  if (raw_eye_look_up_right != 0) {
    total_size += 2 + 4;
  }

  // float eye_squint_left = 19;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_eye_squint_left = this->_internal_eye_squint_left();
  uint32_t raw_eye_squint_left;
  memcpy(&raw_eye_squint_left, &tmp_eye_squint_left, sizeof(tmp_eye_squint_left));
  if (raw_eye_squint_left != 0) {
    total_size += 2 + 4;
  }

  // float eye_squint_right = 20;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_eye_squint_right = this->_internal_eye_squint_right();
  uint32_t raw_eye_squint_right;
  memcpy(&raw_eye_squint_right, &tmp_eye_squint_right, sizeof(tmp_eye_squint_right));
  if (raw_eye_squint_right != 0) {
    total_size += 2 + 4;
  }

  // float eye_wide_left = 21;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_eye_wide_left = this->_internal_eye_wide_left();
  uint32_t raw_eye_wide_left;
  memcpy(&raw_eye_wide_left, &tmp_eye_wide_left, sizeof(tmp_eye_wide_left));
  if (raw_eye_wide_left != 0) {
    total_size += 2 + 4;
  }

  // float eye_wide_right = 22;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_eye_wide_right = this->_internal_eye_wide_right();
  uint32_t raw_eye_wide_right;
  memcpy(&raw_eye_wide_right, &tmp_eye_wide_right, sizeof(tmp_eye_wide_right));
  if (raw_eye_wide_right != 0) {
    total_size += 2 + 4;
  }

  // float jaw_forward = 23;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_jaw_forward = this->_internal_jaw_forward();
  uint32_t raw_jaw_forward;
  memcpy(&raw_jaw_forward, &tmp_jaw_forward, sizeof(tmp_jaw_forward));
  if (raw_jaw_forward != 0) {
    total_size += 2 + 4;
  }

  // float jaw_left = 24;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_jaw_left = this->_internal_jaw_left();
  uint32_t raw_jaw_left;
  memcpy(&raw_jaw_left, &tmp_jaw_left, sizeof(tmp_jaw_left));
  if (raw_jaw_left != 0) {
    total_size += 2 + 4;
  }

  // float jaw_open = 25;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_jaw_open = this->_internal_jaw_open();
  uint32_t raw_jaw_open;
  memcpy(&raw_jaw_open, &tmp_jaw_open, sizeof(tmp_jaw_open));
  if (raw_jaw_open != 0) {
    total_size += 2 + 4;
  }

  // float jaw_right = 26;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_jaw_right = this->_internal_jaw_right();
  uint32_t raw_jaw_right;
  memcpy(&raw_jaw_right, &tmp_jaw_right, sizeof(tmp_jaw_right));
  if (raw_jaw_right != 0) {
    total_size += 2 + 4;
  }

  // float mouth_close = 27;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mouth_close = this->_internal_mouth_close();
  uint32_t raw_mouth_close;
  memcpy(&raw_mouth_close, &tmp_mouth_close, sizeof(tmp_mouth_close));
  if (raw_mouth_close != 0) {
    total_size += 2 + 4;
  }

  // float mouth_dimple_left = 28;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mouth_dimple_left = this->_internal_mouth_dimple_left();
  uint32_t raw_mouth_dimple_left;
  memcpy(&raw_mouth_dimple_left, &tmp_mouth_dimple_left, sizeof(tmp_mouth_dimple_left));
  if (raw_mouth_dimple_left != 0) {
    total_size += 2 + 4;
  }

  // float mouth_dimple_right = 29;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mouth_dimple_right = this->_internal_mouth_dimple_right();
  uint32_t raw_mouth_dimple_right;
  memcpy(&raw_mouth_dimple_right, &tmp_mouth_dimple_right, sizeof(tmp_mouth_dimple_right));
  if (raw_mouth_dimple_right != 0) {
    total_size += 2 + 4;
  }

  // float mouth_frown_left = 30;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mouth_frown_left = this->_internal_mouth_frown_left();
  uint32_t raw_mouth_frown_left;
  memcpy(&raw_mouth_frown_left, &tmp_mouth_frown_left, sizeof(tmp_mouth_frown_left));
  if (raw_mouth_frown_left != 0) {
    total_size += 2 + 4;
  }

  // float mouth_frown_right = 31;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mouth_frown_right = this->_internal_mouth_frown_right();
  uint32_t raw_mouth_frown_right;
  memcpy(&raw_mouth_frown_right, &tmp_mouth_frown_right, sizeof(tmp_mouth_frown_right));
  if (raw_mouth_frown_right != 0) {
    total_size += 2 + 4;
  }

  // float mouth_funnel = 32;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mouth_funnel = this->_internal_mouth_funnel();
  uint32_t raw_mouth_funnel;
  memcpy(&raw_mouth_funnel, &tmp_mouth_funnel, sizeof(tmp_mouth_funnel));
  if (raw_mouth_funnel != 0) {
    total_size += 2 + 4;
  }

  // float mouth_left = 33;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mouth_left = this->_internal_mouth_left();
  uint32_t raw_mouth_left;
  memcpy(&raw_mouth_left, &tmp_mouth_left, sizeof(tmp_mouth_left));
  if (raw_mouth_left != 0) {
    total_size += 2 + 4;
  }

  // float mouth_lower_down_left = 34;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mouth_lower_down_left = this->_internal_mouth_lower_down_left();
  uint32_t raw_mouth_lower_down_left;
  memcpy(&raw_mouth_lower_down_left, &tmp_mouth_lower_down_left, sizeof(tmp_mouth_lower_down_left));
  if (raw_mouth_lower_down_left != 0) {
    total_size += 2 + 4;
  }

  // float mouth_lower_down_right = 35;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mouth_lower_down_right = this->_internal_mouth_lower_down_right();
  uint32_t raw_mouth_lower_down_right;
  memcpy(&raw_mouth_lower_down_right, &tmp_mouth_lower_down_right, sizeof(tmp_mouth_lower_down_right));
  if (raw_mouth_lower_down_right != 0) {
    total_size += 2 + 4;
  }

  // float mouth_press_left = 36;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mouth_press_left = this->_internal_mouth_press_left();
  uint32_t raw_mouth_press_left;
  memcpy(&raw_mouth_press_left, &tmp_mouth_press_left, sizeof(tmp_mouth_press_left));
  if (raw_mouth_press_left != 0) {
    total_size += 2 + 4;
  }

  // float mouth_press_right = 37;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mouth_press_right = this->_internal_mouth_press_right();
  uint32_t raw_mouth_press_right;
  memcpy(&raw_mouth_press_right, &tmp_mouth_press_right, sizeof(tmp_mouth_press_right));
  if (raw_mouth_press_right != 0) {
    total_size += 2 + 4;
  }

  // float mouth_pucker = 38;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mouth_pucker = this->_internal_mouth_pucker();
  uint32_t raw_mouth_pucker;
  memcpy(&raw_mouth_pucker, &tmp_mouth_pucker, sizeof(tmp_mouth_pucker));
  if (raw_mouth_pucker != 0) {
    total_size += 2 + 4;
  }

  // float mouth_right = 39;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mouth_right = this->_internal_mouth_right();
  uint32_t raw_mouth_right;
  memcpy(&raw_mouth_right, &tmp_mouth_right, sizeof(tmp_mouth_right));
  if (raw_mouth_right != 0) {
    total_size += 2 + 4;
  }

  // float mouth_roll_lower = 40;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mouth_roll_lower = this->_internal_mouth_roll_lower();
  uint32_t raw_mouth_roll_lower;
  memcpy(&raw_mouth_roll_lower, &tmp_mouth_roll_lower, sizeof(tmp_mouth_roll_lower));
  if (raw_mouth_roll_lower != 0) {
    total_size += 2 + 4;
  }

  // float mouth_roll_upper = 41;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mouth_roll_upper = this->_internal_mouth_roll_upper();
  uint32_t raw_mouth_roll_upper;
  memcpy(&raw_mouth_roll_upper, &tmp_mouth_roll_upper, sizeof(tmp_mouth_roll_upper));
  if (raw_mouth_roll_upper != 0) {
    total_size += 2 + 4;
  }

  // float mouth_shrug_lower = 42;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mouth_shrug_lower = this->_internal_mouth_shrug_lower();
  uint32_t raw_mouth_shrug_lower;
  memcpy(&raw_mouth_shrug_lower, &tmp_mouth_shrug_lower, sizeof(tmp_mouth_shrug_lower));
  if (raw_mouth_shrug_lower != 0) {
    total_size += 2 + 4;
  }

  // float mouth_shrug_upper = 43;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mouth_shrug_upper = this->_internal_mouth_shrug_upper();
  uint32_t raw_mouth_shrug_upper;
  memcpy(&raw_mouth_shrug_upper, &tmp_mouth_shrug_upper, sizeof(tmp_mouth_shrug_upper));
  if (raw_mouth_shrug_upper != 0) {
    total_size += 2 + 4;
  }

  // float mouth_smile_left = 44;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mouth_smile_left = this->_internal_mouth_smile_left();
  uint32_t raw_mouth_smile_left;
  memcpy(&raw_mouth_smile_left, &tmp_mouth_smile_left, sizeof(tmp_mouth_smile_left));
  if (raw_mouth_smile_left != 0) {
    total_size += 2 + 4;
  }

  // float mouth_smile_right = 45;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mouth_smile_right = this->_internal_mouth_smile_right();
  uint32_t raw_mouth_smile_right;
  memcpy(&raw_mouth_smile_right, &tmp_mouth_smile_right, sizeof(tmp_mouth_smile_right));
  if (raw_mouth_smile_right != 0) {
    total_size += 2 + 4;
  }

  // float mouth_stretch_left = 46;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mouth_stretch_left = this->_internal_mouth_stretch_left();
  uint32_t raw_mouth_stretch_left;
  memcpy(&raw_mouth_stretch_left, &tmp_mouth_stretch_left, sizeof(tmp_mouth_stretch_left));
  if (raw_mouth_stretch_left != 0) {
    total_size += 2 + 4;
  }

  // float mouth_stretch_right = 47;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mouth_stretch_right = this->_internal_mouth_stretch_right();
  uint32_t raw_mouth_stretch_right;
  memcpy(&raw_mouth_stretch_right, &tmp_mouth_stretch_right, sizeof(tmp_mouth_stretch_right));
  if (raw_mouth_stretch_right != 0) {
    total_size += 2 + 4;
  }

  // float mouth_upper_up_left = 48;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mouth_upper_up_left = this->_internal_mouth_upper_up_left();
  uint32_t raw_mouth_upper_up_left;
  memcpy(&raw_mouth_upper_up_left, &tmp_mouth_upper_up_left, sizeof(tmp_mouth_upper_up_left));
  if (raw_mouth_upper_up_left != 0) {
    total_size += 2 + 4;
  }

  // float mouth_upper_up_right = 49;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mouth_upper_up_right = this->_internal_mouth_upper_up_right();
  uint32_t raw_mouth_upper_up_right;
  memcpy(&raw_mouth_upper_up_right, &tmp_mouth_upper_up_right, sizeof(tmp_mouth_upper_up_right));
  if (raw_mouth_upper_up_right != 0) {
    total_size += 2 + 4;
  }

  // float nose_sneer_left = 50;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_nose_sneer_left = this->_internal_nose_sneer_left();
  uint32_t raw_nose_sneer_left;
  memcpy(&raw_nose_sneer_left, &tmp_nose_sneer_left, sizeof(tmp_nose_sneer_left));
  if (raw_nose_sneer_left != 0) {
    total_size += 2 + 4;
  }

  // float nose_sneer_right = 51;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_nose_sneer_right = this->_internal_nose_sneer_right();
  uint32_t raw_nose_sneer_right;
  memcpy(&raw_nose_sneer_right, &tmp_nose_sneer_right, sizeof(tmp_nose_sneer_right));
  if (raw_nose_sneer_right != 0) {
    total_size += 2 + 4;
  }

  // float tongue_out = 52;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_tongue_out = this->_internal_tongue_out();
  uint32_t raw_tongue_out;
  memcpy(&raw_tongue_out, &tmp_tongue_out, sizeof(tmp_tongue_out));
  if (raw_tongue_out != 0) {
    total_size += 2 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ARKitBlendShapes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ARKitBlendShapes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ARKitBlendShapes::GetClassData() const { return &_class_data_; }


void ARKitBlendShapes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ARKitBlendShapes*>(&to_msg);
  auto& from = static_cast<const ARKitBlendShapes&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:service.ARKitBlendShapes)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_brow_down_left = from._internal_brow_down_left();
  uint32_t raw_brow_down_left;
  memcpy(&raw_brow_down_left, &tmp_brow_down_left, sizeof(tmp_brow_down_left));
  if (raw_brow_down_left != 0) {
    _this->_internal_set_brow_down_left(from._internal_brow_down_left());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_brow_down_right = from._internal_brow_down_right();
  uint32_t raw_brow_down_right;
  memcpy(&raw_brow_down_right, &tmp_brow_down_right, sizeof(tmp_brow_down_right));
  if (raw_brow_down_right != 0) {
    _this->_internal_set_brow_down_right(from._internal_brow_down_right());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_brow_inner_up = from._internal_brow_inner_up();
  uint32_t raw_brow_inner_up;
  memcpy(&raw_brow_inner_up, &tmp_brow_inner_up, sizeof(tmp_brow_inner_up));
  if (raw_brow_inner_up != 0) {
    _this->_internal_set_brow_inner_up(from._internal_brow_inner_up());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_brow_outer_up_left = from._internal_brow_outer_up_left();
  uint32_t raw_brow_outer_up_left;
  memcpy(&raw_brow_outer_up_left, &tmp_brow_outer_up_left, sizeof(tmp_brow_outer_up_left));
  if (raw_brow_outer_up_left != 0) {
    _this->_internal_set_brow_outer_up_left(from._internal_brow_outer_up_left());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_brow_outer_up_right = from._internal_brow_outer_up_right();
  uint32_t raw_brow_outer_up_right;
  memcpy(&raw_brow_outer_up_right, &tmp_brow_outer_up_right, sizeof(tmp_brow_outer_up_right));
  if (raw_brow_outer_up_right != 0) {
    _this->_internal_set_brow_outer_up_right(from._internal_brow_outer_up_right());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_cheek_puff = from._internal_cheek_puff();
  uint32_t raw_cheek_puff;
  memcpy(&raw_cheek_puff, &tmp_cheek_puff, sizeof(tmp_cheek_puff));
  if (raw_cheek_puff != 0) {
    _this->_internal_set_cheek_puff(from._internal_cheek_puff());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_cheek_squint_left = from._internal_cheek_squint_left();
  uint32_t raw_cheek_squint_left;
  memcpy(&raw_cheek_squint_left, &tmp_cheek_squint_left, sizeof(tmp_cheek_squint_left));
  if (raw_cheek_squint_left != 0) {
    _this->_internal_set_cheek_squint_left(from._internal_cheek_squint_left());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_cheek_squint_right = from._internal_cheek_squint_right();
  uint32_t raw_cheek_squint_right;
  memcpy(&raw_cheek_squint_right, &tmp_cheek_squint_right, sizeof(tmp_cheek_squint_right));
  if (raw_cheek_squint_right != 0) {
    _this->_internal_set_cheek_squint_right(from._internal_cheek_squint_right());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_eye_blink_left = from._internal_eye_blink_left();
  uint32_t raw_eye_blink_left;
  memcpy(&raw_eye_blink_left, &tmp_eye_blink_left, sizeof(tmp_eye_blink_left));
  if (raw_eye_blink_left != 0) {
    _this->_internal_set_eye_blink_left(from._internal_eye_blink_left());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_eye_blink_right = from._internal_eye_blink_right();
  uint32_t raw_eye_blink_right;
  memcpy(&raw_eye_blink_right, &tmp_eye_blink_right, sizeof(tmp_eye_blink_right));
  if (raw_eye_blink_right != 0) {
    _this->_internal_set_eye_blink_right(from._internal_eye_blink_right());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_eye_look_down_left = from._internal_eye_look_down_left();
  uint32_t raw_eye_look_down_left;
  memcpy(&raw_eye_look_down_left, &tmp_eye_look_down_left, sizeof(tmp_eye_look_down_left));
  if (raw_eye_look_down_left != 0) {
    _this->_internal_set_eye_look_down_left(from._internal_eye_look_down_left());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_eye_look_down_right = from._internal_eye_look_down_right();
  uint32_t raw_eye_look_down_right;
  memcpy(&raw_eye_look_down_right, &tmp_eye_look_down_right, sizeof(tmp_eye_look_down_right));
  if (raw_eye_look_down_right != 0) {
    _this->_internal_set_eye_look_down_right(from._internal_eye_look_down_right());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_eye_look_in_left = from._internal_eye_look_in_left();
  uint32_t raw_eye_look_in_left;
  memcpy(&raw_eye_look_in_left, &tmp_eye_look_in_left, sizeof(tmp_eye_look_in_left));
  if (raw_eye_look_in_left != 0) {
    _this->_internal_set_eye_look_in_left(from._internal_eye_look_in_left());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_eye_look_in_right = from._internal_eye_look_in_right();
  uint32_t raw_eye_look_in_right;
  memcpy(&raw_eye_look_in_right, &tmp_eye_look_in_right, sizeof(tmp_eye_look_in_right));
  if (raw_eye_look_in_right != 0) {
    _this->_internal_set_eye_look_in_right(from._internal_eye_look_in_right());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_eye_look_out_left = from._internal_eye_look_out_left();
  uint32_t raw_eye_look_out_left;
  memcpy(&raw_eye_look_out_left, &tmp_eye_look_out_left, sizeof(tmp_eye_look_out_left));
  if (raw_eye_look_out_left != 0) {
    _this->_internal_set_eye_look_out_left(from._internal_eye_look_out_left());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_eye_look_out_right = from._internal_eye_look_out_right();
  uint32_t raw_eye_look_out_right;
  memcpy(&raw_eye_look_out_right, &tmp_eye_look_out_right, sizeof(tmp_eye_look_out_right));
  if (raw_eye_look_out_right != 0) {
    _this->_internal_set_eye_look_out_right(from._internal_eye_look_out_right());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_eye_look_up_left = from._internal_eye_look_up_left();
  uint32_t raw_eye_look_up_left;
  memcpy(&raw_eye_look_up_left, &tmp_eye_look_up_left, sizeof(tmp_eye_look_up_left));
  if (raw_eye_look_up_left != 0) {
    _this->_internal_set_eye_look_up_left(from._internal_eye_look_up_left());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_eye_look_up_right = from._internal_eye_look_up_right();
  uint32_t raw_eye_look_up_right;
  memcpy(&raw_eye_look_up_right, &tmp_eye_look_up_right, sizeof(tmp_eye_look_up_right));
  if (raw_eye_look_up_right != 0) {
    _this->_internal_set_eye_look_up_right(from._internal_eye_look_up_right());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_eye_squint_left = from._internal_eye_squint_left();
  uint32_t raw_eye_squint_left;
  memcpy(&raw_eye_squint_left, &tmp_eye_squint_left, sizeof(tmp_eye_squint_left));
  if (raw_eye_squint_left != 0) {
    _this->_internal_set_eye_squint_left(from._internal_eye_squint_left());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_eye_squint_right = from._internal_eye_squint_right();
  uint32_t raw_eye_squint_right;
  memcpy(&raw_eye_squint_right, &tmp_eye_squint_right, sizeof(tmp_eye_squint_right));
  if (raw_eye_squint_right != 0) {
    _this->_internal_set_eye_squint_right(from._internal_eye_squint_right());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_eye_wide_left = from._internal_eye_wide_left();
  uint32_t raw_eye_wide_left;
  memcpy(&raw_eye_wide_left, &tmp_eye_wide_left, sizeof(tmp_eye_wide_left));
  if (raw_eye_wide_left != 0) {
    _this->_internal_set_eye_wide_left(from._internal_eye_wide_left());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_eye_wide_right = from._internal_eye_wide_right();
  uint32_t raw_eye_wide_right;
  memcpy(&raw_eye_wide_right, &tmp_eye_wide_right, sizeof(tmp_eye_wide_right));
  if (raw_eye_wide_right != 0) {
    _this->_internal_set_eye_wide_right(from._internal_eye_wide_right());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_jaw_forward = from._internal_jaw_forward();
  uint32_t raw_jaw_forward;
  memcpy(&raw_jaw_forward, &tmp_jaw_forward, sizeof(tmp_jaw_forward));
  if (raw_jaw_forward != 0) {
    _this->_internal_set_jaw_forward(from._internal_jaw_forward());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_jaw_left = from._internal_jaw_left();
  uint32_t raw_jaw_left;
  memcpy(&raw_jaw_left, &tmp_jaw_left, sizeof(tmp_jaw_left));
  if (raw_jaw_left != 0) {
    _this->_internal_set_jaw_left(from._internal_jaw_left());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_jaw_open = from._internal_jaw_open();
  uint32_t raw_jaw_open;
  memcpy(&raw_jaw_open, &tmp_jaw_open, sizeof(tmp_jaw_open));
  if (raw_jaw_open != 0) {
    _this->_internal_set_jaw_open(from._internal_jaw_open());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_jaw_right = from._internal_jaw_right();
  uint32_t raw_jaw_right;
  memcpy(&raw_jaw_right, &tmp_jaw_right, sizeof(tmp_jaw_right));
  if (raw_jaw_right != 0) {
    _this->_internal_set_jaw_right(from._internal_jaw_right());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mouth_close = from._internal_mouth_close();
  uint32_t raw_mouth_close;
  memcpy(&raw_mouth_close, &tmp_mouth_close, sizeof(tmp_mouth_close));
  if (raw_mouth_close != 0) {
    _this->_internal_set_mouth_close(from._internal_mouth_close());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mouth_dimple_left = from._internal_mouth_dimple_left();
  uint32_t raw_mouth_dimple_left;
  memcpy(&raw_mouth_dimple_left, &tmp_mouth_dimple_left, sizeof(tmp_mouth_dimple_left));
  if (raw_mouth_dimple_left != 0) {
    _this->_internal_set_mouth_dimple_left(from._internal_mouth_dimple_left());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mouth_dimple_right = from._internal_mouth_dimple_right();
  uint32_t raw_mouth_dimple_right;
  memcpy(&raw_mouth_dimple_right, &tmp_mouth_dimple_right, sizeof(tmp_mouth_dimple_right));
  if (raw_mouth_dimple_right != 0) {
    _this->_internal_set_mouth_dimple_right(from._internal_mouth_dimple_right());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mouth_frown_left = from._internal_mouth_frown_left();
  uint32_t raw_mouth_frown_left;
  memcpy(&raw_mouth_frown_left, &tmp_mouth_frown_left, sizeof(tmp_mouth_frown_left));
  if (raw_mouth_frown_left != 0) {
    _this->_internal_set_mouth_frown_left(from._internal_mouth_frown_left());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mouth_frown_right = from._internal_mouth_frown_right();
  uint32_t raw_mouth_frown_right;
  memcpy(&raw_mouth_frown_right, &tmp_mouth_frown_right, sizeof(tmp_mouth_frown_right));
  if (raw_mouth_frown_right != 0) {
    _this->_internal_set_mouth_frown_right(from._internal_mouth_frown_right());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mouth_funnel = from._internal_mouth_funnel();
  uint32_t raw_mouth_funnel;
  memcpy(&raw_mouth_funnel, &tmp_mouth_funnel, sizeof(tmp_mouth_funnel));
  if (raw_mouth_funnel != 0) {
    _this->_internal_set_mouth_funnel(from._internal_mouth_funnel());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mouth_left = from._internal_mouth_left();
  uint32_t raw_mouth_left;
  memcpy(&raw_mouth_left, &tmp_mouth_left, sizeof(tmp_mouth_left));
  if (raw_mouth_left != 0) {
    _this->_internal_set_mouth_left(from._internal_mouth_left());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mouth_lower_down_left = from._internal_mouth_lower_down_left();
  uint32_t raw_mouth_lower_down_left;
  memcpy(&raw_mouth_lower_down_left, &tmp_mouth_lower_down_left, sizeof(tmp_mouth_lower_down_left));
  if (raw_mouth_lower_down_left != 0) {
    _this->_internal_set_mouth_lower_down_left(from._internal_mouth_lower_down_left());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mouth_lower_down_right = from._internal_mouth_lower_down_right();
  uint32_t raw_mouth_lower_down_right;
  memcpy(&raw_mouth_lower_down_right, &tmp_mouth_lower_down_right, sizeof(tmp_mouth_lower_down_right));
  if (raw_mouth_lower_down_right != 0) {
    _this->_internal_set_mouth_lower_down_right(from._internal_mouth_lower_down_right());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mouth_press_left = from._internal_mouth_press_left();
  uint32_t raw_mouth_press_left;
  memcpy(&raw_mouth_press_left, &tmp_mouth_press_left, sizeof(tmp_mouth_press_left));
  if (raw_mouth_press_left != 0) {
    _this->_internal_set_mouth_press_left(from._internal_mouth_press_left());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mouth_press_right = from._internal_mouth_press_right();
  uint32_t raw_mouth_press_right;
  memcpy(&raw_mouth_press_right, &tmp_mouth_press_right, sizeof(tmp_mouth_press_right));
  if (raw_mouth_press_right != 0) {
    _this->_internal_set_mouth_press_right(from._internal_mouth_press_right());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mouth_pucker = from._internal_mouth_pucker();
  uint32_t raw_mouth_pucker;
  memcpy(&raw_mouth_pucker, &tmp_mouth_pucker, sizeof(tmp_mouth_pucker));
  if (raw_mouth_pucker != 0) {
    _this->_internal_set_mouth_pucker(from._internal_mouth_pucker());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mouth_right = from._internal_mouth_right();
  uint32_t raw_mouth_right;
  memcpy(&raw_mouth_right, &tmp_mouth_right, sizeof(tmp_mouth_right));
  if (raw_mouth_right != 0) {
    _this->_internal_set_mouth_right(from._internal_mouth_right());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mouth_roll_lower = from._internal_mouth_roll_lower();
  uint32_t raw_mouth_roll_lower;
  memcpy(&raw_mouth_roll_lower, &tmp_mouth_roll_lower, sizeof(tmp_mouth_roll_lower));
  if (raw_mouth_roll_lower != 0) {
    _this->_internal_set_mouth_roll_lower(from._internal_mouth_roll_lower());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mouth_roll_upper = from._internal_mouth_roll_upper();
  uint32_t raw_mouth_roll_upper;
  memcpy(&raw_mouth_roll_upper, &tmp_mouth_roll_upper, sizeof(tmp_mouth_roll_upper));
  if (raw_mouth_roll_upper != 0) {
    _this->_internal_set_mouth_roll_upper(from._internal_mouth_roll_upper());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mouth_shrug_lower = from._internal_mouth_shrug_lower();
  uint32_t raw_mouth_shrug_lower;
  memcpy(&raw_mouth_shrug_lower, &tmp_mouth_shrug_lower, sizeof(tmp_mouth_shrug_lower));
  if (raw_mouth_shrug_lower != 0) {
    _this->_internal_set_mouth_shrug_lower(from._internal_mouth_shrug_lower());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mouth_shrug_upper = from._internal_mouth_shrug_upper();
  uint32_t raw_mouth_shrug_upper;
  memcpy(&raw_mouth_shrug_upper, &tmp_mouth_shrug_upper, sizeof(tmp_mouth_shrug_upper));
  if (raw_mouth_shrug_upper != 0) {
    _this->_internal_set_mouth_shrug_upper(from._internal_mouth_shrug_upper());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mouth_smile_left = from._internal_mouth_smile_left();
  uint32_t raw_mouth_smile_left;
  memcpy(&raw_mouth_smile_left, &tmp_mouth_smile_left, sizeof(tmp_mouth_smile_left));
  if (raw_mouth_smile_left != 0) {
    _this->_internal_set_mouth_smile_left(from._internal_mouth_smile_left());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mouth_smile_right = from._internal_mouth_smile_right();
  uint32_t raw_mouth_smile_right;
  memcpy(&raw_mouth_smile_right, &tmp_mouth_smile_right, sizeof(tmp_mouth_smile_right));
  if (raw_mouth_smile_right != 0) {
    _this->_internal_set_mouth_smile_right(from._internal_mouth_smile_right());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mouth_stretch_left = from._internal_mouth_stretch_left();
  uint32_t raw_mouth_stretch_left;
  memcpy(&raw_mouth_stretch_left, &tmp_mouth_stretch_left, sizeof(tmp_mouth_stretch_left));
  if (raw_mouth_stretch_left != 0) {
    _this->_internal_set_mouth_stretch_left(from._internal_mouth_stretch_left());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mouth_stretch_right = from._internal_mouth_stretch_right();
  uint32_t raw_mouth_stretch_right;
  memcpy(&raw_mouth_stretch_right, &tmp_mouth_stretch_right, sizeof(tmp_mouth_stretch_right));
  if (raw_mouth_stretch_right != 0) {
    _this->_internal_set_mouth_stretch_right(from._internal_mouth_stretch_right());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mouth_upper_up_left = from._internal_mouth_upper_up_left();
  uint32_t raw_mouth_upper_up_left;
  memcpy(&raw_mouth_upper_up_left, &tmp_mouth_upper_up_left, sizeof(tmp_mouth_upper_up_left));
  if (raw_mouth_upper_up_left != 0) {
    _this->_internal_set_mouth_upper_up_left(from._internal_mouth_upper_up_left());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mouth_upper_up_right = from._internal_mouth_upper_up_right();
  uint32_t raw_mouth_upper_up_right;
  memcpy(&raw_mouth_upper_up_right, &tmp_mouth_upper_up_right, sizeof(tmp_mouth_upper_up_right));
  if (raw_mouth_upper_up_right != 0) {
    _this->_internal_set_mouth_upper_up_right(from._internal_mouth_upper_up_right());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_nose_sneer_left = from._internal_nose_sneer_left();
  uint32_t raw_nose_sneer_left;
  memcpy(&raw_nose_sneer_left, &tmp_nose_sneer_left, sizeof(tmp_nose_sneer_left));
  if (raw_nose_sneer_left != 0) {
    _this->_internal_set_nose_sneer_left(from._internal_nose_sneer_left());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_nose_sneer_right = from._internal_nose_sneer_right();
  uint32_t raw_nose_sneer_right;
  memcpy(&raw_nose_sneer_right, &tmp_nose_sneer_right, sizeof(tmp_nose_sneer_right));
  if (raw_nose_sneer_right != 0) {
    _this->_internal_set_nose_sneer_right(from._internal_nose_sneer_right());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_tongue_out = from._internal_tongue_out();
  uint32_t raw_tongue_out;
  memcpy(&raw_tongue_out, &tmp_tongue_out, sizeof(tmp_tongue_out));
  if (raw_tongue_out != 0) {
    _this->_internal_set_tongue_out(from._internal_tongue_out());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ARKitBlendShapes::CopyFrom(const ARKitBlendShapes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service.ARKitBlendShapes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ARKitBlendShapes::IsInitialized() const {
  return true;
}

void ARKitBlendShapes::InternalSwap(ARKitBlendShapes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ARKitBlendShapes, _impl_.tongue_out_)
      + sizeof(ARKitBlendShapes::_impl_.tongue_out_)
      - PROTOBUF_FIELD_OFFSET(ARKitBlendShapes, _impl_.brow_down_left_)>(
          reinterpret_cast<char*>(&_impl_.brow_down_left_),
          reinterpret_cast<char*>(&other->_impl_.brow_down_left_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ARKitBlendShapes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_arkit_5fblend_5fshapes_2eproto_getter, &descriptor_table_arkit_5fblend_5fshapes_2eproto_once,
      file_level_metadata_arkit_5fblend_5fshapes_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace service
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::service::ARKitBlendShapesData*
Arena::CreateMaybeMessage< ::service::ARKitBlendShapesData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service::ARKitBlendShapesData >(arena);
}
template<> PROTOBUF_NOINLINE ::service::ARKitBlendShapes*
Arena::CreateMaybeMessage< ::service::ARKitBlendShapes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service::ARKitBlendShapes >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

#endif
